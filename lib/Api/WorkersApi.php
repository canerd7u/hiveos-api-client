<?php
/**
 * WorkersApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * WorkersApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation farmsFarmIdWorkersCommandAmdUploadPost
     *
     * Extended version of \"amd_upload\" command
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersCommandAmdUploadPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersCommandAmdUploadPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersCommandAmdUploadPostWithHttpInfo
     *
     * Extended version of \"amd_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersCommandAmdUploadPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandAmdUploadPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersCommandAmdUploadPostAsync
     *
     * Extended version of \"amd_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandAmdUploadPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersCommandAmdUploadPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersCommandAmdUploadPostAsyncWithHttpInfo
     *
     * Extended version of \"amd_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandAmdUploadPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandAmdUploadPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersCommandAmdUploadPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersCommandAmdUploadPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersCommandAmdUploadPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/command/amd_upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersCommandNvidiaUploadPost
     *
     * Extended version of \"nvidia_upload\" command
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersCommandNvidiaUploadPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersCommandNvidiaUploadPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersCommandNvidiaUploadPostWithHttpInfo
     *
     * Extended version of \"nvidia_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersCommandNvidiaUploadPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandNvidiaUploadPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersCommandNvidiaUploadPostAsync
     *
     * Extended version of \"nvidia_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandNvidiaUploadPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersCommandNvidiaUploadPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersCommandNvidiaUploadPostAsyncWithHttpInfo
     *
     * Extended version of \"nvidia_upload\" command
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandNvidiaUploadPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandNvidiaUploadPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersCommandNvidiaUploadPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersCommandNvidiaUploadPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersCommandNvidiaUploadPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/command/nvidia_upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersCommandPost
     *
     * Execute command on multiple workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersCommandPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersCommandPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersCommandPostWithHttpInfo
     *
     * Execute command on multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersCommandPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersCommandPostAsync
     *
     * Execute command on multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersCommandPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersCommandPostAsyncWithHttpInfo
     *
     * Execute command on multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersCommandPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersCommandPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersCommandPost'
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersCommandPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersCommandPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersDelete
     *
     * Delete multiple workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersDelete($farm_id, $body = null)
    {
        $this->farmsFarmIdWorkersDeleteWithHttpInfo($farm_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersDeleteWithHttpInfo
     *
     * Delete multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersDeleteWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersDeleteRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersDeleteAsync
     *
     * Delete multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersDeleteAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersDeleteAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersDeleteAsyncWithHttpInfo
     *
     * Delete multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersDeleteAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersDeleteRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersDelete'
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersDeleteRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/workers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersFiltersGet
     *
     * Available values for filters that are used in worker and GPU lists
     *
     * @param  int $farm_id farm_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersFiltersGet($farm_id)
    {
        list($response) = $this->farmsFarmIdWorkersFiltersGetWithHttpInfo($farm_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersFiltersGetWithHttpInfo
     *
     * Available values for filters that are used in worker and GPU lists
     *
     * @param  int $farm_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersFiltersGetWithHttpInfo($farm_id)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersFiltersGetRequest($farm_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersFiltersGetAsync
     *
     * Available values for filters that are used in worker and GPU lists
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersFiltersGetAsync($farm_id)
    {
        return $this->farmsFarmIdWorkersFiltersGetAsyncWithHttpInfo($farm_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersFiltersGetAsyncWithHttpInfo
     *
     * Available values for filters that are used in worker and GPU lists
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersFiltersGetAsyncWithHttpInfo($farm_id)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersFiltersGetRequest($farm_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersFiltersGet'
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersFiltersGetRequest($farm_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersFiltersGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersFixAutoTagsPost
     *
     * Synchronize auto-tags of all workers of the farm
     *
     * @param  int $farm_id farm_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersFixAutoTagsPost($farm_id)
    {
        $this->farmsFarmIdWorkersFixAutoTagsPostWithHttpInfo($farm_id);
    }

    /**
     * Operation farmsFarmIdWorkersFixAutoTagsPostWithHttpInfo
     *
     * Synchronize auto-tags of all workers of the farm
     *
     * @param  int $farm_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersFixAutoTagsPostWithHttpInfo($farm_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersFixAutoTagsPostRequest($farm_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersFixAutoTagsPostAsync
     *
     * Synchronize auto-tags of all workers of the farm
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersFixAutoTagsPostAsync($farm_id)
    {
        return $this->farmsFarmIdWorkersFixAutoTagsPostAsyncWithHttpInfo($farm_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersFixAutoTagsPostAsyncWithHttpInfo
     *
     * Synchronize auto-tags of all workers of the farm
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersFixAutoTagsPostAsyncWithHttpInfo($farm_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersFixAutoTagsPostRequest($farm_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersFixAutoTagsPost'
     *
     * @param  int $farm_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersFixAutoTagsPostRequest($farm_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersFixAutoTagsPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/fix_auto_tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersGet
     *
     * Farm workers list
     *
     * @param  int $farm_id farm_id (required)
     * @param  string $filter Optional filter for workers (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     * @param  int $platform Worker platform: * 1 - GPU * 2 - ASIC (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersGet($farm_id, $filter = null, $tags = null, $platform = null)
    {
        list($response) = $this->farmsFarmIdWorkersGetWithHttpInfo($farm_id, $filter, $tags, $platform);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersGetWithHttpInfo
     *
     * Farm workers list
     *
     * @param  int $farm_id (required)
     * @param  string $filter Optional filter for workers (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     * @param  int $platform Worker platform: * 1 - GPU * 2 - ASIC (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersGetWithHttpInfo($farm_id, $filter = null, $tags = null, $platform = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersGetRequest($farm_id, $filter, $tags, $platform);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersGetAsync
     *
     * Farm workers list
     *
     * @param  int $farm_id (required)
     * @param  string $filter Optional filter for workers (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     * @param  int $platform Worker platform: * 1 - GPU * 2 - ASIC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersGetAsync($farm_id, $filter = null, $tags = null, $platform = null)
    {
        return $this->farmsFarmIdWorkersGetAsyncWithHttpInfo($farm_id, $filter, $tags, $platform)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersGetAsyncWithHttpInfo
     *
     * Farm workers list
     *
     * @param  int $farm_id (required)
     * @param  string $filter Optional filter for workers (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     * @param  int $platform Worker platform: * 1 - GPU * 2 - ASIC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersGetAsyncWithHttpInfo($farm_id, $filter = null, $tags = null, $platform = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersGetRequest($farm_id, $filter, $tags, $platform);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersGet'
     *
     * @param  int $farm_id (required)
     * @param  string $filter Optional filter for workers (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     * @param  int $platform Worker platform: * 1 - GPU * 2 - ASIC (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersGetRequest($farm_id, $filter = null, $tags = null, $platform = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }
        // query params
        if ($platform !== null) {
            $queryParams['platform'] = ObjectSerializer::toQueryValue($platform);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersGpusGet
     *
     * Farm workers GPUs list
     *
     * @param  int $farm_id farm_id (required)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersGpusGet($farm_id, $worker_ids = null, $tags = null)
    {
        list($response) = $this->farmsFarmIdWorkersGpusGetWithHttpInfo($farm_id, $worker_ids, $tags);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersGpusGetWithHttpInfo
     *
     * Farm workers GPUs list
     *
     * @param  int $farm_id (required)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersGpusGetWithHttpInfo($farm_id, $worker_ids = null, $tags = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersGpusGetRequest($farm_id, $worker_ids, $tags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersGpusGetAsync
     *
     * Farm workers GPUs list
     *
     * @param  int $farm_id (required)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersGpusGetAsync($farm_id, $worker_ids = null, $tags = null)
    {
        return $this->farmsFarmIdWorkersGpusGetAsyncWithHttpInfo($farm_id, $worker_ids, $tags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersGpusGetAsyncWithHttpInfo
     *
     * Farm workers GPUs list
     *
     * @param  int $farm_id (required)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersGpusGetAsyncWithHttpInfo($farm_id, $worker_ids = null, $tags = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersGpusGetRequest($farm_id, $worker_ids, $tags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersGpusGet'
     *
     * @param  int $farm_id (required)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $tags Filter by tags. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersGpusGetRequest($farm_id, $worker_ids = null, $tags = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersGpusGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/gpus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($worker_ids !== null) {
            $queryParams['worker_ids'] = ObjectSerializer::toQueryValue($worker_ids);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersMessagesDelete
     *
     * Delete all messages of all or provided workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersMessagesDelete($farm_id, $body = null)
    {
        $this->farmsFarmIdWorkersMessagesDeleteWithHttpInfo($farm_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersMessagesDeleteWithHttpInfo
     *
     * Delete all messages of all or provided workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersMessagesDeleteWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersMessagesDeleteRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersMessagesDeleteAsync
     *
     * Delete all messages of all or provided workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMessagesDeleteAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersMessagesDeleteAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersMessagesDeleteAsyncWithHttpInfo
     *
     * Delete all messages of all or provided workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMessagesDeleteAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersMessagesDeleteRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersMessagesDelete'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersMessagesDeleteRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersMessagesDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersMessagesGet
     *
     * Farm workers messages list
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersMessagesGet($farm_id, $page = '1', $per_page = null, $worker_ids = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        list($response) = $this->farmsFarmIdWorkersMessagesGetWithHttpInfo($farm_id, $page, $per_page, $worker_ids, $message_ids, $with_payload, $start_time);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersMessagesGetWithHttpInfo
     *
     * Farm workers messages list
     *
     * @param  int $farm_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersMessagesGetWithHttpInfo($farm_id, $page = '1', $per_page = null, $worker_ids = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMessagesGetRequest($farm_id, $page, $per_page, $worker_ids, $message_ids, $with_payload, $start_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersMessagesGetAsync
     *
     * Farm workers messages list
     *
     * @param  int $farm_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMessagesGetAsync($farm_id, $page = '1', $per_page = null, $worker_ids = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        return $this->farmsFarmIdWorkersMessagesGetAsyncWithHttpInfo($farm_id, $page, $per_page, $worker_ids, $message_ids, $with_payload, $start_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersMessagesGetAsyncWithHttpInfo
     *
     * Farm workers messages list
     *
     * @param  int $farm_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMessagesGetAsyncWithHttpInfo($farm_id, $page = '1', $per_page = null, $worker_ids = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMessagesGetRequest($farm_id, $page, $per_page, $worker_ids, $message_ids, $with_payload, $start_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersMessagesGet'
     *
     * @param  int $farm_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $worker_ids Return only records for these workers, comma-separated list of IDs (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersMessagesGetRequest($farm_id, $page = '1', $per_page = null, $worker_ids = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersMessagesGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($worker_ids !== null) {
            $queryParams['worker_ids'] = ObjectSerializer::toQueryValue($worker_ids);
        }
        // query params
        if ($message_ids !== null) {
            $queryParams['message_ids'] = ObjectSerializer::toQueryValue($message_ids);
        }
        // query params
        if ($with_payload !== null) {
            $queryParams['with_payload'] = ObjectSerializer::toQueryValue($with_payload);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['start_time'] = ObjectSerializer::toQueryValue($start_time);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersMultiPatch
     *
     * Edit multiple workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersMultiPatch($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersMultiPatchWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersMultiPatchWithHttpInfo
     *
     * Edit multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersMultiPatchWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMultiPatchRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersMultiPatchAsync
     *
     * Edit multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMultiPatchAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersMultiPatchAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersMultiPatchAsyncWithHttpInfo
     *
     * Edit multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMultiPatchAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMultiPatchRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersMultiPatch'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersMultiPatchRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersMultiPatch'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersMultiPost
     *
     * Create multiple workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersMultiPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersMultiPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersMultiPostWithHttpInfo
     *
     * Create multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersMultiPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMultiPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersMultiPostAsync
     *
     * Create multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMultiPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersMultiPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersMultiPostAsyncWithHttpInfo
     *
     * Create multiple workers
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersMultiPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersMultiPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersMultiPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersMultiPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersMultiPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/multi';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersOverclockPost
     *
     * Extended overclocking
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersOverclockPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersOverclockPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersOverclockPostWithHttpInfo
     *
     * Extended overclocking
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersOverclockPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersOverclockPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersOverclockPostAsync
     *
     * Extended overclocking
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersOverclockPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersOverclockPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersOverclockPostAsyncWithHttpInfo
     *
     * Extended overclocking
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersOverclockPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersOverclockPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersOverclockPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersOverclockPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersOverclockPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/overclock';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersPatch
     *
     * Edit multiple workers at once
     *
     * @param  int $farm_id farm_id (required)
     * @param  bool $merge Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter (optional)
     * @param  object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersPatch($farm_id, $merge = null, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersPatchWithHttpInfo($farm_id, $merge, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersPatchWithHttpInfo
     *
     * Edit multiple workers at once
     *
     * @param  int $farm_id (required)
     * @param  bool $merge Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter (optional)
     * @param  object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersPatchWithHttpInfo($farm_id, $merge = null, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersPatchRequest($farm_id, $merge, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersPatchAsync
     *
     * Edit multiple workers at once
     *
     * @param  int $farm_id (required)
     * @param  bool $merge Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPatchAsync($farm_id, $merge = null, $body = null)
    {
        return $this->farmsFarmIdWorkersPatchAsyncWithHttpInfo($farm_id, $merge, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersPatchAsyncWithHttpInfo
     *
     * Edit multiple workers at once
     *
     * @param  int $farm_id (required)
     * @param  bool $merge Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPatchAsyncWithHttpInfo($farm_id, $merge = null, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersPatchRequest($farm_id, $merge, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersPatch'
     *
     * @param  int $farm_id (required)
     * @param  bool $merge Merge some fields instead of replace them. These fields are: * miners_config * watchdog * autofan * octofan * coolbox * fanflap * powermeter (optional)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersPatchRequest($farm_id, $merge = null, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersPatch'
            );
        }

        $resourcePath = '/farms/{farmId}/workers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($merge !== null) {
            $queryParams['merge'] = ObjectSerializer::toQueryValue($merge);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersPost
     *
     * Create new worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\WorkerCreateRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Worker
     */
    public function farmsFarmIdWorkersPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersPostWithHttpInfo
     *
     * Create new worker
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\WorkerCreateRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Worker, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Worker';
        $request = $this->farmsFarmIdWorkersPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Worker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersPostAsync
     *
     * Create new worker
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\WorkerCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersPostAsyncWithHttpInfo
     *
     * Create new worker
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\WorkerCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Worker';
        $request = $this->farmsFarmIdWorkersPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\WorkerCreateRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersPreviewGet
     *
     * Preview all workers of the farm
     *
     * @param  int $farm_id farm_id (required)
     * @param  string $search_id ID of cached workers selection (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersPreviewGet($farm_id, $search_id = null)
    {
        list($response) = $this->farmsFarmIdWorkersPreviewGetWithHttpInfo($farm_id, $search_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersPreviewGetWithHttpInfo
     *
     * Preview all workers of the farm
     *
     * @param  int $farm_id (required)
     * @param  string $search_id ID of cached workers selection (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersPreviewGetWithHttpInfo($farm_id, $search_id = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersPreviewGetRequest($farm_id, $search_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersPreviewGetAsync
     *
     * Preview all workers of the farm
     *
     * @param  int $farm_id (required)
     * @param  string $search_id ID of cached workers selection (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPreviewGetAsync($farm_id, $search_id = null)
    {
        return $this->farmsFarmIdWorkersPreviewGetAsyncWithHttpInfo($farm_id, $search_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersPreviewGetAsyncWithHttpInfo
     *
     * Preview all workers of the farm
     *
     * @param  int $farm_id (required)
     * @param  string $search_id ID of cached workers selection (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersPreviewGetAsyncWithHttpInfo($farm_id, $search_id = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersPreviewGetRequest($farm_id, $search_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersPreviewGet'
     *
     * @param  int $farm_id (required)
     * @param  string $search_id ID of cached workers selection (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersPreviewGetRequest($farm_id, $search_id = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersPreviewGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_id !== null) {
            $queryParams['search_id'] = ObjectSerializer::toQueryValue($search_id);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersReloadPost
     *
     * Reload multiple workers
     *
     * @param  int $farm_id farm_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersReloadPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersReloadPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersReloadPostWithHttpInfo
     *
     * Reload multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersReloadPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersReloadPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersReloadPostAsync
     *
     * Reload multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersReloadPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersReloadPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersReloadPostAsyncWithHttpInfo
     *
     * Reload multiple workers
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersReloadPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersReloadPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersReloadPost'
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersReloadPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersReloadPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/reload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersTransferPost
     *
     * Transfer multiple workers to another farm
     *
     * @param  int $farm_id farm_id (required)
     * @param  object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersTransferPost($farm_id, $body = null)
    {
        $this->farmsFarmIdWorkersTransferPostWithHttpInfo($farm_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersTransferPostWithHttpInfo
     *
     * Transfer multiple workers to another farm
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersTransferPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersTransferPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersTransferPostAsync
     *
     * Transfer multiple workers to another farm
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersTransferPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdWorkersTransferPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersTransferPostAsyncWithHttpInfo
     *
     * Transfer multiple workers to another farm
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersTransferPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersTransferPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersTransferPost'
     *
     * @param  int $farm_id (required)
     * @param  object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersTransferPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersTransferPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdCommandPost
     *
     * Execute command
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\CommandRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersWorkerIdCommandPost($farm_id, $worker_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdCommandPostWithHttpInfo($farm_id, $worker_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdCommandPostWithHttpInfo
     *
     * Execute command
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\CommandRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdCommandPostWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdCommandPostRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdCommandPostAsync
     *
     * Execute command
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\CommandRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdCommandPostAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdCommandPostAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdCommandPostAsyncWithHttpInfo
     *
     * Execute command
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\CommandRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdCommandPostAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdCommandPostRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdCommandPost'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\CommandRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdCommandPostRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdCommandPost'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdCommandPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/command';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsConfigGet
     *
     * Get configuration file for worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  string $config config (required)
     * @param  bool $download Download response as a file (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WorkerConfigFiles
     */
    public function farmsFarmIdWorkersWorkerIdConfigsConfigGet($farm_id, $worker_id, $config, $download = null)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdConfigsConfigGetWithHttpInfo($farm_id, $worker_id, $config, $download);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsConfigGetWithHttpInfo
     *
     * Get configuration file for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $config (required)
     * @param  bool $download Download response as a file (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WorkerConfigFiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdConfigsConfigGetWithHttpInfo($farm_id, $worker_id, $config, $download = null)
    {
        $returnType = '\Swagger\Client\Model\WorkerConfigFiles';
        $request = $this->farmsFarmIdWorkersWorkerIdConfigsConfigGetRequest($farm_id, $worker_id, $config, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WorkerConfigFiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsConfigGetAsync
     *
     * Get configuration file for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $config (required)
     * @param  bool $download Download response as a file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdConfigsConfigGetAsync($farm_id, $worker_id, $config, $download = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdConfigsConfigGetAsyncWithHttpInfo($farm_id, $worker_id, $config, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsConfigGetAsyncWithHttpInfo
     *
     * Get configuration file for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $config (required)
     * @param  bool $download Download response as a file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdConfigsConfigGetAsyncWithHttpInfo($farm_id, $worker_id, $config, $download = null)
    {
        $returnType = '\Swagger\Client\Model\WorkerConfigFiles';
        $request = $this->farmsFarmIdWorkersWorkerIdConfigsConfigGetRequest($farm_id, $worker_id, $config, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdConfigsConfigGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $config (required)
     * @param  bool $download Download response as a file (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdConfigsConfigGetRequest($farm_id, $worker_id, $config, $download = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdConfigsConfigGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdConfigsConfigGet'
            );
        }
        // verify the required parameter 'config' is set
        if ($config === null || (is_array($config) && count($config) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $config when calling farmsFarmIdWorkersWorkerIdConfigsConfigGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/configs/{config}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }
        // path params
        if ($config !== null) {
            $resourcePath = str_replace(
                '{' . 'config' . '}',
                ObjectSerializer::toPathValue($config),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsGet
     *
     * Get configuration files for worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WorkerConfigFiles
     */
    public function farmsFarmIdWorkersWorkerIdConfigsGet($farm_id, $worker_id)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdConfigsGetWithHttpInfo($farm_id, $worker_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsGetWithHttpInfo
     *
     * Get configuration files for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WorkerConfigFiles, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdConfigsGetWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '\Swagger\Client\Model\WorkerConfigFiles';
        $request = $this->farmsFarmIdWorkersWorkerIdConfigsGetRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WorkerConfigFiles',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsGetAsync
     *
     * Get configuration files for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdConfigsGetAsync($farm_id, $worker_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdConfigsGetAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdConfigsGetAsyncWithHttpInfo
     *
     * Get configuration files for worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdConfigsGetAsyncWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '\Swagger\Client\Model\WorkerConfigFiles';
        $request = $this->farmsFarmIdWorkersWorkerIdConfigsGetRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdConfigsGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdConfigsGetRequest($farm_id, $worker_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdConfigsGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdConfigsGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdDelete
     *
     * Delete worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdDelete($farm_id, $worker_id)
    {
        $this->farmsFarmIdWorkersWorkerIdDeleteWithHttpInfo($farm_id, $worker_id);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdDeleteWithHttpInfo
     *
     * Delete worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdDeleteWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdDeleteRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdDeleteAsync
     *
     * Delete worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdDeleteAsync($farm_id, $worker_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdDeleteAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdDeleteAsyncWithHttpInfo
     *
     * Delete worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdDeleteAsyncWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdDeleteRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdDelete'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdDeleteRequest($farm_id, $worker_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdDelete'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdFixAutoTagsPost
     *
     * Synchronize auto-tags of the worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdFixAutoTagsPost($farm_id, $worker_id)
    {
        $this->farmsFarmIdWorkersWorkerIdFixAutoTagsPostWithHttpInfo($farm_id, $worker_id);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdFixAutoTagsPostWithHttpInfo
     *
     * Synchronize auto-tags of the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdFixAutoTagsPostWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdFixAutoTagsPostRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdFixAutoTagsPostAsync
     *
     * Synchronize auto-tags of the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdFixAutoTagsPostAsync($farm_id, $worker_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdFixAutoTagsPostAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdFixAutoTagsPostAsyncWithHttpInfo
     *
     * Synchronize auto-tags of the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdFixAutoTagsPostAsyncWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdFixAutoTagsPostRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdFixAutoTagsPost'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdFixAutoTagsPostRequest($farm_id, $worker_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdFixAutoTagsPost'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdFixAutoTagsPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/fix_auto_tags';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdGet
     *
     * Worker info
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Worker
     */
    public function farmsFarmIdWorkersWorkerIdGet($farm_id, $worker_id)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdGetWithHttpInfo($farm_id, $worker_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdGetWithHttpInfo
     *
     * Worker info
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Worker, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdGetWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '\Swagger\Client\Model\Worker';
        $request = $this->farmsFarmIdWorkersWorkerIdGetRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Worker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdGetAsync
     *
     * Worker info
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdGetAsync($farm_id, $worker_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdGetAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdGetAsyncWithHttpInfo
     *
     * Worker info
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdGetAsyncWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = '\Swagger\Client\Model\Worker';
        $request = $this->farmsFarmIdWorkersWorkerIdGetRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdGetRequest($farm_id, $worker_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesDelete
     *
     * Delete all worker messages
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\Body $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdMessagesDelete($farm_id, $worker_id, $body = null)
    {
        $this->farmsFarmIdWorkersWorkerIdMessagesDeleteWithHttpInfo($farm_id, $worker_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesDeleteWithHttpInfo
     *
     * Delete all worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdMessagesDeleteWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesDeleteRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesDeleteAsync
     *
     * Delete all worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesDeleteAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdMessagesDeleteAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesDeleteAsyncWithHttpInfo
     *
     * Delete all worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesDeleteAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesDeleteRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdMessagesDelete'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\Body $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdMessagesDeleteRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdMessagesDelete'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdMessagesDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesGet
     *
     * Worker messages
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersWorkerIdMessagesGet($farm_id, $worker_id, $page = '1', $per_page = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdMessagesGetWithHttpInfo($farm_id, $worker_id, $page, $per_page, $message_ids, $with_payload, $start_time);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesGetWithHttpInfo
     *
     * Worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdMessagesGetWithHttpInfo($farm_id, $worker_id, $page = '1', $per_page = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesGetRequest($farm_id, $worker_id, $page, $per_page, $message_ids, $with_payload, $start_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesGetAsync
     *
     * Worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesGetAsync($farm_id, $worker_id, $page = '1', $per_page = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdMessagesGetAsyncWithHttpInfo($farm_id, $worker_id, $page, $per_page, $message_ids, $with_payload, $start_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesGetAsyncWithHttpInfo
     *
     * Worker messages
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesGetAsyncWithHttpInfo($farm_id, $worker_id, $page = '1', $per_page = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesGetRequest($farm_id, $worker_id, $page, $per_page, $message_ids, $with_payload, $start_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdMessagesGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $page Page number (optional, default to 1)
     * @param  int $per_page Per-page count (default is 15) (optional)
     * @param  string $message_ids Return only these messages, comma-separated list of IDs (optional)
     * @param  int $with_payload Include message payload to ouput (optional, default to 0)
     * @param  int $start_time Return only messages starting from given timestamp (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdMessagesGetRequest($farm_id, $worker_id, $page = '1', $per_page = null, $message_ids = null, $with_payload = '0', $start_time = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdMessagesGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdMessagesGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page);
        }
        // query params
        if ($message_ids !== null) {
            $queryParams['message_ids'] = ObjectSerializer::toQueryValue($message_ids);
        }
        // query params
        if ($with_payload !== null) {
            $queryParams['with_payload'] = ObjectSerializer::toQueryValue($with_payload);
        }
        // query params
        if ($start_time !== null) {
            $queryParams['start_time'] = ObjectSerializer::toQueryValue($start_time);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete
     *
     * Delete message
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  int $message_id message_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete($farm_id, $worker_id, $message_id)
    {
        $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteWithHttpInfo($farm_id, $worker_id, $message_id);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteWithHttpInfo
     *
     * Delete message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteWithHttpInfo($farm_id, $worker_id, $message_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteRequest($farm_id, $worker_id, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteAsync
     *
     * Delete message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteAsync($farm_id, $worker_id, $message_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteAsyncWithHttpInfo($farm_id, $worker_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteAsyncWithHttpInfo
     *
     * Delete message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteAsyncWithHttpInfo($farm_id, $worker_id, $message_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteRequest($farm_id, $worker_id, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdMessagesMessageIdDeleteRequest($farm_id, $worker_id, $message_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/messages/{messageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdGet
     *
     * Get worker message
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  int $message_id message_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WorkerMessageFull
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdGet($farm_id, $worker_id, $message_id)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdGetWithHttpInfo($farm_id, $worker_id, $message_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdGetWithHttpInfo
     *
     * Get worker message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WorkerMessageFull, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdGetWithHttpInfo($farm_id, $worker_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\WorkerMessageFull';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdGetRequest($farm_id, $worker_id, $message_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WorkerMessageFull',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdGetAsync
     *
     * Get worker message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdGetAsync($farm_id, $worker_id, $message_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdGetAsyncWithHttpInfo($farm_id, $worker_id, $message_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMessagesMessageIdGetAsyncWithHttpInfo
     *
     * Get worker message
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMessagesMessageIdGetAsyncWithHttpInfo($farm_id, $worker_id, $message_id)
    {
        $returnType = '\Swagger\Client\Model\WorkerMessageFull';
        $request = $this->farmsFarmIdWorkersWorkerIdMessagesMessageIdGetRequest($farm_id, $worker_id, $message_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdMessagesMessageIdGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  int $message_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdMessagesMessageIdGetRequest($farm_id, $worker_id, $message_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdGet'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling farmsFarmIdWorkersWorkerIdMessagesMessageIdGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/messages/{messageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'messageId' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMetricsGet
     *
     * Worker metrics
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  string $date Start date (optional, default to today)
     * @param  string $period Period (1 day, 1 week, 1 month) (optional, default to 1d)
     * @param  int $fill_gaps Fill gaps with empty points (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersWorkerIdMetricsGet($farm_id, $worker_id, $date = 'today', $period = '1d', $fill_gaps = '0')
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdMetricsGetWithHttpInfo($farm_id, $worker_id, $date, $period, $fill_gaps);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMetricsGetWithHttpInfo
     *
     * Worker metrics
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $date Start date (optional, default to today)
     * @param  string $period Period (1 day, 1 week, 1 month) (optional, default to 1d)
     * @param  int $fill_gaps Fill gaps with empty points (optional, default to 0)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdMetricsGetWithHttpInfo($farm_id, $worker_id, $date = 'today', $period = '1d', $fill_gaps = '0')
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdMetricsGetRequest($farm_id, $worker_id, $date, $period, $fill_gaps);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMetricsGetAsync
     *
     * Worker metrics
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $date Start date (optional, default to today)
     * @param  string $period Period (1 day, 1 week, 1 month) (optional, default to 1d)
     * @param  int $fill_gaps Fill gaps with empty points (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMetricsGetAsync($farm_id, $worker_id, $date = 'today', $period = '1d', $fill_gaps = '0')
    {
        return $this->farmsFarmIdWorkersWorkerIdMetricsGetAsyncWithHttpInfo($farm_id, $worker_id, $date, $period, $fill_gaps)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdMetricsGetAsyncWithHttpInfo
     *
     * Worker metrics
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $date Start date (optional, default to today)
     * @param  string $period Period (1 day, 1 week, 1 month) (optional, default to 1d)
     * @param  int $fill_gaps Fill gaps with empty points (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdMetricsGetAsyncWithHttpInfo($farm_id, $worker_id, $date = 'today', $period = '1d', $fill_gaps = '0')
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdMetricsGetRequest($farm_id, $worker_id, $date, $period, $fill_gaps);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdMetricsGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  string $date Start date (optional, default to today)
     * @param  string $period Period (1 day, 1 week, 1 month) (optional, default to 1d)
     * @param  int $fill_gaps Fill gaps with empty points (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdMetricsGetRequest($farm_id, $worker_id, $date = 'today', $period = '1d', $fill_gaps = '0')
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdMetricsGet'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdMetricsGet'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/metrics';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($period !== null) {
            $queryParams['period'] = ObjectSerializer::toQueryValue($period);
        }
        // query params
        if ($fill_gaps !== null) {
            $queryParams['fill_gaps'] = ObjectSerializer::toQueryValue($fill_gaps);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPasswordPut
     *
     * Update worker password
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditPassword $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdPasswordPut($farm_id, $worker_id, $body = null)
    {
        $this->farmsFarmIdWorkersWorkerIdPasswordPutWithHttpInfo($farm_id, $worker_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPasswordPutWithHttpInfo
     *
     * Update worker password
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditPassword $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdPasswordPutWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdPasswordPutRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPasswordPutAsync
     *
     * Update worker password
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditPassword $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPasswordPutAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdPasswordPutAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPasswordPutAsyncWithHttpInfo
     *
     * Update worker password
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditPassword $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPasswordPutAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdPasswordPutRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdPasswordPut'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditPassword $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdPasswordPutRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdPasswordPut'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdPasswordPut'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPatch
     *
     * Edit worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\WorkerUpdatedResponse
     */
    public function farmsFarmIdWorkersWorkerIdPatch($farm_id, $worker_id, $body = null)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdPatchWithHttpInfo($farm_id, $worker_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPatchWithHttpInfo
     *
     * Edit worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\WorkerUpdatedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdPatchWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\WorkerUpdatedResponse';
        $request = $this->farmsFarmIdWorkersWorkerIdPatchRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\WorkerUpdatedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPatchAsync
     *
     * Edit worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPatchAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdPatchAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPatchAsyncWithHttpInfo
     *
     * Edit worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPatchAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\WorkerUpdatedResponse';
        $request = $this->farmsFarmIdWorkersWorkerIdPatchRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdPatch'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerEditRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdPatchRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdPatch'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdPatch'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPersonalSettingsPatch
     *
     * Update personal settings for the worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\FarmPersonalSettings $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdPersonalSettingsPatch($farm_id, $worker_id, $body = null)
    {
        $this->farmsFarmIdWorkersWorkerIdPersonalSettingsPatchWithHttpInfo($farm_id, $worker_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPersonalSettingsPatchWithHttpInfo
     *
     * Update personal settings for the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\FarmPersonalSettings $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdPersonalSettingsPatchWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdPersonalSettingsPatchRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPersonalSettingsPatchAsync
     *
     * Update personal settings for the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\FarmPersonalSettings $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPersonalSettingsPatchAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdPersonalSettingsPatchAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdPersonalSettingsPatchAsyncWithHttpInfo
     *
     * Update personal settings for the worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\FarmPersonalSettings $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdPersonalSettingsPatchAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdPersonalSettingsPatchRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdPersonalSettingsPatch'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\FarmPersonalSettings $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdPersonalSettingsPatchRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdPersonalSettingsPatch'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdPersonalSettingsPatch'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/personal_settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdReloadPost
     *
     * Reload worker
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdWorkersWorkerIdReloadPost($farm_id, $worker_id)
    {
        list($response) = $this->farmsFarmIdWorkersWorkerIdReloadPostWithHttpInfo($farm_id, $worker_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdReloadPostWithHttpInfo
     *
     * Reload worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdReloadPostWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdReloadPostRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdReloadPostAsync
     *
     * Reload worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdReloadPostAsync($farm_id, $worker_id)
    {
        return $this->farmsFarmIdWorkersWorkerIdReloadPostAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdReloadPostAsyncWithHttpInfo
     *
     * Reload worker
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdReloadPostAsyncWithHttpInfo($farm_id, $worker_id)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdWorkersWorkerIdReloadPostRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdReloadPost'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdReloadPostRequest($farm_id, $worker_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdReloadPost'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdReloadPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/reload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdTransferPost
     *
     * Transfer worker to another farm
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id worker_id (required)
     * @param  \Swagger\Client\Model\WorkerTransferRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdWorkersWorkerIdTransferPost($farm_id, $worker_id, $body = null)
    {
        $this->farmsFarmIdWorkersWorkerIdTransferPostWithHttpInfo($farm_id, $worker_id, $body);
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdTransferPostWithHttpInfo
     *
     * Transfer worker to another farm
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerTransferRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdWorkersWorkerIdTransferPostWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdTransferPostRequest($farm_id, $worker_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdTransferPostAsync
     *
     * Transfer worker to another farm
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerTransferRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdTransferPostAsync($farm_id, $worker_id, $body = null)
    {
        return $this->farmsFarmIdWorkersWorkerIdTransferPostAsyncWithHttpInfo($farm_id, $worker_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdWorkersWorkerIdTransferPostAsyncWithHttpInfo
     *
     * Transfer worker to another farm
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerTransferRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdWorkersWorkerIdTransferPostAsyncWithHttpInfo($farm_id, $worker_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdWorkersWorkerIdTransferPostRequest($farm_id, $worker_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdWorkersWorkerIdTransferPost'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id (required)
     * @param  \Swagger\Client\Model\WorkerTransferRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdWorkersWorkerIdTransferPostRequest($farm_id, $worker_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdWorkersWorkerIdTransferPost'
            );
        }
        // verify the required parameter 'worker_id' is set
        if ($worker_id === null || (is_array($worker_id) && count($worker_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $worker_id when calling farmsFarmIdWorkersWorkerIdTransferPost'
            );
        }

        $resourcePath = '/farms/{farmId}/workers/{workerId}/transfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($worker_id !== null) {
            $resourcePath = str_replace(
                '{' . 'workerId' . '}',
                ObjectSerializer::toPathValue($worker_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
