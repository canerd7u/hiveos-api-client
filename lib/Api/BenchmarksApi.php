<?php
/**
 * BenchmarksApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * BenchmarksApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BenchmarksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdDelete
     *
     * Delete benchmark
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $benchmark_id benchmark_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdBenchmarksBenchmarkIdDelete($farm_id, $benchmark_id)
    {
        $this->farmsFarmIdBenchmarksBenchmarkIdDeleteWithHttpInfo($farm_id, $benchmark_id);
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdDeleteWithHttpInfo
     *
     * Delete benchmark
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksBenchmarkIdDeleteWithHttpInfo($farm_id, $benchmark_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdBenchmarksBenchmarkIdDeleteRequest($farm_id, $benchmark_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdDeleteAsync
     *
     * Delete benchmark
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksBenchmarkIdDeleteAsync($farm_id, $benchmark_id)
    {
        return $this->farmsFarmIdBenchmarksBenchmarkIdDeleteAsyncWithHttpInfo($farm_id, $benchmark_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdDeleteAsyncWithHttpInfo
     *
     * Delete benchmark
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksBenchmarkIdDeleteAsyncWithHttpInfo($farm_id, $benchmark_id)
    {
        $returnType = '';
        $request = $this->farmsFarmIdBenchmarksBenchmarkIdDeleteRequest($farm_id, $benchmark_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksBenchmarkIdDelete'
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksBenchmarkIdDeleteRequest($farm_id, $benchmark_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksBenchmarkIdDelete'
            );
        }
        // verify the required parameter 'benchmark_id' is set
        if ($benchmark_id === null || (is_array($benchmark_id) && count($benchmark_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benchmark_id when calling farmsFarmIdBenchmarksBenchmarkIdDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks/{benchmarkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($benchmark_id !== null) {
            $resourcePath = str_replace(
                '{' . 'benchmarkId' . '}',
                ObjectSerializer::toPathValue($benchmark_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdGet
     *
     * Benchmark info
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $benchmark_id benchmark_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BenchmarkWithResults
     */
    public function farmsFarmIdBenchmarksBenchmarkIdGet($farm_id, $benchmark_id)
    {
        list($response) = $this->farmsFarmIdBenchmarksBenchmarkIdGetWithHttpInfo($farm_id, $benchmark_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdGetWithHttpInfo
     *
     * Benchmark info
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BenchmarkWithResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksBenchmarkIdGetWithHttpInfo($farm_id, $benchmark_id)
    {
        $returnType = '\Swagger\Client\Model\BenchmarkWithResults';
        $request = $this->farmsFarmIdBenchmarksBenchmarkIdGetRequest($farm_id, $benchmark_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BenchmarkWithResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdGetAsync
     *
     * Benchmark info
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksBenchmarkIdGetAsync($farm_id, $benchmark_id)
    {
        return $this->farmsFarmIdBenchmarksBenchmarkIdGetAsyncWithHttpInfo($farm_id, $benchmark_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksBenchmarkIdGetAsyncWithHttpInfo
     *
     * Benchmark info
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksBenchmarkIdGetAsyncWithHttpInfo($farm_id, $benchmark_id)
    {
        $returnType = '\Swagger\Client\Model\BenchmarkWithResults';
        $request = $this->farmsFarmIdBenchmarksBenchmarkIdGetRequest($farm_id, $benchmark_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksBenchmarkIdGet'
     *
     * @param  int $farm_id (required)
     * @param  int $benchmark_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksBenchmarkIdGetRequest($farm_id, $benchmark_id)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksBenchmarkIdGet'
            );
        }
        // verify the required parameter 'benchmark_id' is set
        if ($benchmark_id === null || (is_array($benchmark_id) && count($benchmark_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $benchmark_id when calling farmsFarmIdBenchmarksBenchmarkIdGet'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks/{benchmarkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }
        // path params
        if ($benchmark_id !== null) {
            $resourcePath = str_replace(
                '{' . 'benchmarkId' . '}',
                ObjectSerializer::toPathValue($benchmark_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdBenchmarksDelete
     *
     * Delete multiple benchmarks
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\IDs $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function farmsFarmIdBenchmarksDelete($farm_id, $body = null)
    {
        $this->farmsFarmIdBenchmarksDeleteWithHttpInfo($farm_id, $body);
    }

    /**
     * Operation farmsFarmIdBenchmarksDeleteWithHttpInfo
     *
     * Delete multiple benchmarks
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\IDs $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksDeleteWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdBenchmarksDeleteRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksDeleteAsync
     *
     * Delete multiple benchmarks
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\IDs $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksDeleteAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdBenchmarksDeleteAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksDeleteAsyncWithHttpInfo
     *
     * Delete multiple benchmarks
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\IDs $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksDeleteAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '';
        $request = $this->farmsFarmIdBenchmarksDeleteRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksDelete'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\IDs $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksDeleteRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksDelete'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdBenchmarksGet
     *
     * Get executed benchmarks
     *
     * @param  int $farm_id farm_id (required)
     * @param  string $worker_id Return only records for these workers, comma-separated list of IDs (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdBenchmarksGet($farm_id, $worker_id = null)
    {
        list($response) = $this->farmsFarmIdBenchmarksGetWithHttpInfo($farm_id, $worker_id);
        return $response;
    }

    /**
     * Operation farmsFarmIdBenchmarksGetWithHttpInfo
     *
     * Get executed benchmarks
     *
     * @param  int $farm_id (required)
     * @param  string $worker_id Return only records for these workers, comma-separated list of IDs (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksGetWithHttpInfo($farm_id, $worker_id = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdBenchmarksGetRequest($farm_id, $worker_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksGetAsync
     *
     * Get executed benchmarks
     *
     * @param  int $farm_id (required)
     * @param  string $worker_id Return only records for these workers, comma-separated list of IDs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksGetAsync($farm_id, $worker_id = null)
    {
        return $this->farmsFarmIdBenchmarksGetAsyncWithHttpInfo($farm_id, $worker_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksGetAsyncWithHttpInfo
     *
     * Get executed benchmarks
     *
     * @param  int $farm_id (required)
     * @param  string $worker_id Return only records for these workers, comma-separated list of IDs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksGetAsyncWithHttpInfo($farm_id, $worker_id = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdBenchmarksGetRequest($farm_id, $worker_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksGet'
     *
     * @param  int $farm_id (required)
     * @param  string $worker_id Return only records for these workers, comma-separated list of IDs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksGetRequest($farm_id, $worker_id = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksGet'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($worker_id !== null) {
            $queryParams['worker_id'] = ObjectSerializer::toQueryValue($worker_id);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdBenchmarksJobsGet
     *
     * Get available bechmark jobs (algos) that can be run.
     *
     * @param  int $farm_id farm_id (required)
     * @param  int $worker_id Worker ID for individual run (optional)
     * @param  string $tags Tags for batch run. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function farmsFarmIdBenchmarksJobsGet($farm_id, $worker_id = null, $tags = null)
    {
        list($response) = $this->farmsFarmIdBenchmarksJobsGetWithHttpInfo($farm_id, $worker_id, $tags);
        return $response;
    }

    /**
     * Operation farmsFarmIdBenchmarksJobsGetWithHttpInfo
     *
     * Get available bechmark jobs (algos) that can be run.
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id Worker ID for individual run (optional)
     * @param  string $tags Tags for batch run. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksJobsGetWithHttpInfo($farm_id, $worker_id = null, $tags = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdBenchmarksJobsGetRequest($farm_id, $worker_id, $tags);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksJobsGetAsync
     *
     * Get available bechmark jobs (algos) that can be run.
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id Worker ID for individual run (optional)
     * @param  string $tags Tags for batch run. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksJobsGetAsync($farm_id, $worker_id = null, $tags = null)
    {
        return $this->farmsFarmIdBenchmarksJobsGetAsyncWithHttpInfo($farm_id, $worker_id, $tags)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksJobsGetAsyncWithHttpInfo
     *
     * Get available bechmark jobs (algos) that can be run.
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id Worker ID for individual run (optional)
     * @param  string $tags Tags for batch run. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksJobsGetAsyncWithHttpInfo($farm_id, $worker_id = null, $tags = null)
    {
        $returnType = 'object';
        $request = $this->farmsFarmIdBenchmarksJobsGetRequest($farm_id, $worker_id, $tags);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksJobsGet'
     *
     * @param  int $farm_id (required)
     * @param  int $worker_id Worker ID for individual run (optional)
     * @param  string $tags Tags for batch run. Comma-separated list of Tag IDs. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksJobsGetRequest($farm_id, $worker_id = null, $tags = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksJobsGet'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($worker_id !== null) {
            $queryParams['worker_id'] = ObjectSerializer::toQueryValue($worker_id);
        }
        // query params
        if ($tags !== null) {
            $queryParams['tags'] = ObjectSerializer::toQueryValue($tags);
        }

        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation farmsFarmIdBenchmarksPost
     *
     * Start new benchmark
     *
     * @param  int $farm_id farm_id (required)
     * @param  \Swagger\Client\Model\BenchmarkRequest $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Benchmark
     */
    public function farmsFarmIdBenchmarksPost($farm_id, $body = null)
    {
        list($response) = $this->farmsFarmIdBenchmarksPostWithHttpInfo($farm_id, $body);
        return $response;
    }

    /**
     * Operation farmsFarmIdBenchmarksPostWithHttpInfo
     *
     * Start new benchmark
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\BenchmarkRequest $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Benchmark, HTTP status code, HTTP response headers (array of strings)
     */
    public function farmsFarmIdBenchmarksPostWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Benchmark';
        $request = $this->farmsFarmIdBenchmarksPostRequest($farm_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Benchmark',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation farmsFarmIdBenchmarksPostAsync
     *
     * Start new benchmark
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\BenchmarkRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksPostAsync($farm_id, $body = null)
    {
        return $this->farmsFarmIdBenchmarksPostAsyncWithHttpInfo($farm_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation farmsFarmIdBenchmarksPostAsyncWithHttpInfo
     *
     * Start new benchmark
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\BenchmarkRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function farmsFarmIdBenchmarksPostAsyncWithHttpInfo($farm_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\Benchmark';
        $request = $this->farmsFarmIdBenchmarksPostRequest($farm_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'farmsFarmIdBenchmarksPost'
     *
     * @param  int $farm_id (required)
     * @param  \Swagger\Client\Model\BenchmarkRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function farmsFarmIdBenchmarksPostRequest($farm_id, $body = null)
    {
        // verify the required parameter 'farm_id' is set
        if ($farm_id === null || (is_array($farm_id) && count($farm_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $farm_id when calling farmsFarmIdBenchmarksPost'
            );
        }

        $resourcePath = '/farms/{farmId}/benchmarks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($farm_id !== null) {
            $resourcePath = str_replace(
                '{' . 'farmId' . '}',
                ObjectSerializer::toPathValue($farm_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
