<?php
/**
 * WorkerListItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WorkerListItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkerListItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkerListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'platform' => '\Swagger\Client\Model\Platform',
        'name' => 'string',
        'description' => 'string',
        'units_count' => 'int',
        'active' => 'bool',
        'password' => 'string',
        'tag_ids' => 'int[]',
        'mirror_url' => '\Swagger\Client\Model\MirrorUrl',
        'red_temp' => 'int',
        'red_mem_temp' => 'float',
        'red_cpu_temp' => 'float',
        'red_board_temp' => 'float',
        'red_fan' => 'int',
        'red_asr' => 'int',
        'red_la' => 'float',
        'red_hashrates' => 'object[]',
        'ip_addresses' => 'string[]',
        'remote_address' => 'object',
        'vpn' => 'bool',
        'has_amd' => 'bool',
        'has_nvidia' => 'bool',
        'needs_upgrade' => 'bool',
        'packages_hash' => 'string',
        'lan_config' => 'object',
        'system_type' => 'string',
        'os_name' => 'string',
        'has_octofan' => 'bool',
        'has_coolbox' => 'bool',
        'has_fanflap' => 'bool',
        'has_powermeter' => 'bool',
        'has_asichub' => 'bool',
        'has_donnager_relay' => 'bool',
        'personal_settings' => 'object',
        'versions' => 'object',
        'stats' => 'object',
        'flight_sheet' => '\Swagger\Client\Model\FSMidInfo',
        'overclock' => 'object',
        'tuned_miners' => '\Swagger\Client\Model\MinerName[]',
        'miners_summary' => 'object',
        'miners_stats' => 'object',
        'hardware_info' => 'object',
        'hardware_stats' => 'object',
        'gpu_summary' => 'object',
        'gpu_info' => '\Swagger\Client\Model\GpuInfo[]',
        'gpu_stats' => 'object[]',
        'asic_info' => 'object',
        'asichub_id' => 'int',
        'asic_stats' => 'object',
        'watchdog' => 'object',
        'options' => 'object',
        'hardware_power_draw' => 'int',
        'psu_efficiency' => 'int',
        'octofan_correct_power' => 'bool',
        'autofan' => 'object',
        'octofan' => 'object',
        'octofan_stats' => 'object',
        'coolbox' => 'object',
        'coolbox_info' => 'object',
        'coolbox_stats' => 'object',
        'fanflap' => 'object',
        'fanflap_stats' => '\Swagger\Client\Model\FanflapStats',
        'powermeter' => 'object',
        'powermeter_stats' => '\Swagger\Client\Model\PowermeterStats',
        'donnager_relay' => 'object',
        'donnager_relay_info' => 'object',
        'donnager_relay_stats' => 'object',
        'ykeda_autofan' => 'object',
        'ykeda_autofan_stats' => 'object',
        'commands' => 'object[]',
        'benchmark_id' => 'int',
        'asic_config' => 'map[string,string]',
        'messages_counts' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'platform' => null,
        'name' => null,
        'description' => null,
        'units_count' => null,
        'active' => null,
        'password' => 'password, alpha-numeric',
        'tag_ids' => null,
        'mirror_url' => null,
        'red_temp' => null,
        'red_mem_temp' => null,
        'red_cpu_temp' => null,
        'red_board_temp' => null,
        'red_fan' => null,
        'red_asr' => null,
        'red_la' => null,
        'red_hashrates' => null,
        'ip_addresses' => 'ip',
        'remote_address' => null,
        'vpn' => null,
        'has_amd' => null,
        'has_nvidia' => null,
        'needs_upgrade' => null,
        'packages_hash' => null,
        'lan_config' => null,
        'system_type' => null,
        'os_name' => null,
        'has_octofan' => null,
        'has_coolbox' => null,
        'has_fanflap' => null,
        'has_powermeter' => null,
        'has_asichub' => null,
        'has_donnager_relay' => null,
        'personal_settings' => null,
        'versions' => null,
        'stats' => null,
        'flight_sheet' => null,
        'overclock' => null,
        'tuned_miners' => null,
        'miners_summary' => null,
        'miners_stats' => null,
        'hardware_info' => null,
        'hardware_stats' => null,
        'gpu_summary' => null,
        'gpu_info' => null,
        'gpu_stats' => null,
        'asic_info' => null,
        'asichub_id' => null,
        'asic_stats' => null,
        'watchdog' => null,
        'options' => null,
        'hardware_power_draw' => null,
        'psu_efficiency' => null,
        'octofan_correct_power' => null,
        'autofan' => null,
        'octofan' => null,
        'octofan_stats' => null,
        'coolbox' => null,
        'coolbox_info' => null,
        'coolbox_stats' => null,
        'fanflap' => null,
        'fanflap_stats' => null,
        'powermeter' => null,
        'powermeter_stats' => null,
        'donnager_relay' => null,
        'donnager_relay_info' => null,
        'donnager_relay_stats' => null,
        'ykeda_autofan' => null,
        'ykeda_autofan_stats' => null,
        'commands' => null,
        'benchmark_id' => null,
        'asic_config' => null,
        'messages_counts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'platform' => 'platform',
        'name' => 'name',
        'description' => 'description',
        'units_count' => 'units_count',
        'active' => 'active',
        'password' => 'password',
        'tag_ids' => 'tag_ids',
        'mirror_url' => 'mirror_url',
        'red_temp' => 'red_temp',
        'red_mem_temp' => 'red_mem_temp',
        'red_cpu_temp' => 'red_cpu_temp',
        'red_board_temp' => 'red_board_temp',
        'red_fan' => 'red_fan',
        'red_asr' => 'red_asr',
        'red_la' => 'red_la',
        'red_hashrates' => 'red_hashrates',
        'ip_addresses' => 'ip_addresses',
        'remote_address' => 'remote_address',
        'vpn' => 'vpn',
        'has_amd' => 'has_amd',
        'has_nvidia' => 'has_nvidia',
        'needs_upgrade' => 'needs_upgrade',
        'packages_hash' => 'packages_hash',
        'lan_config' => 'lan_config',
        'system_type' => 'system_type',
        'os_name' => 'os_name',
        'has_octofan' => 'has_octofan',
        'has_coolbox' => 'has_coolbox',
        'has_fanflap' => 'has_fanflap',
        'has_powermeter' => 'has_powermeter',
        'has_asichub' => 'has_asichub',
        'has_donnager_relay' => 'has_donnager_relay',
        'personal_settings' => 'personal_settings',
        'versions' => 'versions',
        'stats' => 'stats',
        'flight_sheet' => 'flight_sheet',
        'overclock' => 'overclock',
        'tuned_miners' => 'tuned_miners',
        'miners_summary' => 'miners_summary',
        'miners_stats' => 'miners_stats',
        'hardware_info' => 'hardware_info',
        'hardware_stats' => 'hardware_stats',
        'gpu_summary' => 'gpu_summary',
        'gpu_info' => 'gpu_info',
        'gpu_stats' => 'gpu_stats',
        'asic_info' => 'asic_info',
        'asichub_id' => 'asichub_id',
        'asic_stats' => 'asic_stats',
        'watchdog' => 'watchdog',
        'options' => 'options',
        'hardware_power_draw' => 'hardware_power_draw',
        'psu_efficiency' => 'psu_efficiency',
        'octofan_correct_power' => 'octofan_correct_power',
        'autofan' => 'autofan',
        'octofan' => 'octofan',
        'octofan_stats' => 'octofan_stats',
        'coolbox' => 'coolbox',
        'coolbox_info' => 'coolbox_info',
        'coolbox_stats' => 'coolbox_stats',
        'fanflap' => 'fanflap',
        'fanflap_stats' => 'fanflap_stats',
        'powermeter' => 'powermeter',
        'powermeter_stats' => 'powermeter_stats',
        'donnager_relay' => 'donnager_relay',
        'donnager_relay_info' => 'donnager_relay_info',
        'donnager_relay_stats' => 'donnager_relay_stats',
        'ykeda_autofan' => 'ykeda_autofan',
        'ykeda_autofan_stats' => 'ykeda_autofan_stats',
        'commands' => 'commands',
        'benchmark_id' => 'benchmark_id',
        'asic_config' => 'asic_config',
        'messages_counts' => 'messages_counts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'platform' => 'setPlatform',
        'name' => 'setName',
        'description' => 'setDescription',
        'units_count' => 'setUnitsCount',
        'active' => 'setActive',
        'password' => 'setPassword',
        'tag_ids' => 'setTagIds',
        'mirror_url' => 'setMirrorUrl',
        'red_temp' => 'setRedTemp',
        'red_mem_temp' => 'setRedMemTemp',
        'red_cpu_temp' => 'setRedCpuTemp',
        'red_board_temp' => 'setRedBoardTemp',
        'red_fan' => 'setRedFan',
        'red_asr' => 'setRedAsr',
        'red_la' => 'setRedLa',
        'red_hashrates' => 'setRedHashrates',
        'ip_addresses' => 'setIpAddresses',
        'remote_address' => 'setRemoteAddress',
        'vpn' => 'setVpn',
        'has_amd' => 'setHasAmd',
        'has_nvidia' => 'setHasNvidia',
        'needs_upgrade' => 'setNeedsUpgrade',
        'packages_hash' => 'setPackagesHash',
        'lan_config' => 'setLanConfig',
        'system_type' => 'setSystemType',
        'os_name' => 'setOsName',
        'has_octofan' => 'setHasOctofan',
        'has_coolbox' => 'setHasCoolbox',
        'has_fanflap' => 'setHasFanflap',
        'has_powermeter' => 'setHasPowermeter',
        'has_asichub' => 'setHasAsichub',
        'has_donnager_relay' => 'setHasDonnagerRelay',
        'personal_settings' => 'setPersonalSettings',
        'versions' => 'setVersions',
        'stats' => 'setStats',
        'flight_sheet' => 'setFlightSheet',
        'overclock' => 'setOverclock',
        'tuned_miners' => 'setTunedMiners',
        'miners_summary' => 'setMinersSummary',
        'miners_stats' => 'setMinersStats',
        'hardware_info' => 'setHardwareInfo',
        'hardware_stats' => 'setHardwareStats',
        'gpu_summary' => 'setGpuSummary',
        'gpu_info' => 'setGpuInfo',
        'gpu_stats' => 'setGpuStats',
        'asic_info' => 'setAsicInfo',
        'asichub_id' => 'setAsichubId',
        'asic_stats' => 'setAsicStats',
        'watchdog' => 'setWatchdog',
        'options' => 'setOptions',
        'hardware_power_draw' => 'setHardwarePowerDraw',
        'psu_efficiency' => 'setPsuEfficiency',
        'octofan_correct_power' => 'setOctofanCorrectPower',
        'autofan' => 'setAutofan',
        'octofan' => 'setOctofan',
        'octofan_stats' => 'setOctofanStats',
        'coolbox' => 'setCoolbox',
        'coolbox_info' => 'setCoolboxInfo',
        'coolbox_stats' => 'setCoolboxStats',
        'fanflap' => 'setFanflap',
        'fanflap_stats' => 'setFanflapStats',
        'powermeter' => 'setPowermeter',
        'powermeter_stats' => 'setPowermeterStats',
        'donnager_relay' => 'setDonnagerRelay',
        'donnager_relay_info' => 'setDonnagerRelayInfo',
        'donnager_relay_stats' => 'setDonnagerRelayStats',
        'ykeda_autofan' => 'setYkedaAutofan',
        'ykeda_autofan_stats' => 'setYkedaAutofanStats',
        'commands' => 'setCommands',
        'benchmark_id' => 'setBenchmarkId',
        'asic_config' => 'setAsicConfig',
        'messages_counts' => 'setMessagesCounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'platform' => 'getPlatform',
        'name' => 'getName',
        'description' => 'getDescription',
        'units_count' => 'getUnitsCount',
        'active' => 'getActive',
        'password' => 'getPassword',
        'tag_ids' => 'getTagIds',
        'mirror_url' => 'getMirrorUrl',
        'red_temp' => 'getRedTemp',
        'red_mem_temp' => 'getRedMemTemp',
        'red_cpu_temp' => 'getRedCpuTemp',
        'red_board_temp' => 'getRedBoardTemp',
        'red_fan' => 'getRedFan',
        'red_asr' => 'getRedAsr',
        'red_la' => 'getRedLa',
        'red_hashrates' => 'getRedHashrates',
        'ip_addresses' => 'getIpAddresses',
        'remote_address' => 'getRemoteAddress',
        'vpn' => 'getVpn',
        'has_amd' => 'getHasAmd',
        'has_nvidia' => 'getHasNvidia',
        'needs_upgrade' => 'getNeedsUpgrade',
        'packages_hash' => 'getPackagesHash',
        'lan_config' => 'getLanConfig',
        'system_type' => 'getSystemType',
        'os_name' => 'getOsName',
        'has_octofan' => 'getHasOctofan',
        'has_coolbox' => 'getHasCoolbox',
        'has_fanflap' => 'getHasFanflap',
        'has_powermeter' => 'getHasPowermeter',
        'has_asichub' => 'getHasAsichub',
        'has_donnager_relay' => 'getHasDonnagerRelay',
        'personal_settings' => 'getPersonalSettings',
        'versions' => 'getVersions',
        'stats' => 'getStats',
        'flight_sheet' => 'getFlightSheet',
        'overclock' => 'getOverclock',
        'tuned_miners' => 'getTunedMiners',
        'miners_summary' => 'getMinersSummary',
        'miners_stats' => 'getMinersStats',
        'hardware_info' => 'getHardwareInfo',
        'hardware_stats' => 'getHardwareStats',
        'gpu_summary' => 'getGpuSummary',
        'gpu_info' => 'getGpuInfo',
        'gpu_stats' => 'getGpuStats',
        'asic_info' => 'getAsicInfo',
        'asichub_id' => 'getAsichubId',
        'asic_stats' => 'getAsicStats',
        'watchdog' => 'getWatchdog',
        'options' => 'getOptions',
        'hardware_power_draw' => 'getHardwarePowerDraw',
        'psu_efficiency' => 'getPsuEfficiency',
        'octofan_correct_power' => 'getOctofanCorrectPower',
        'autofan' => 'getAutofan',
        'octofan' => 'getOctofan',
        'octofan_stats' => 'getOctofanStats',
        'coolbox' => 'getCoolbox',
        'coolbox_info' => 'getCoolboxInfo',
        'coolbox_stats' => 'getCoolboxStats',
        'fanflap' => 'getFanflap',
        'fanflap_stats' => 'getFanflapStats',
        'powermeter' => 'getPowermeter',
        'powermeter_stats' => 'getPowermeterStats',
        'donnager_relay' => 'getDonnagerRelay',
        'donnager_relay_info' => 'getDonnagerRelayInfo',
        'donnager_relay_stats' => 'getDonnagerRelayStats',
        'ykeda_autofan' => 'getYkedaAutofan',
        'ykeda_autofan_stats' => 'getYkedaAutofanStats',
        'commands' => 'getCommands',
        'benchmark_id' => 'getBenchmarkId',
        'asic_config' => 'getAsicConfig',
        'messages_counts' => 'getMessagesCounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SYSTEM_TYPE_LINUX = 'linux';
    const SYSTEM_TYPE_ASIC = 'asic';
    const SYSTEM_TYPE_WINDOWS = 'windows';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSystemTypeAllowableValues()
    {
        return [
            self::SYSTEM_TYPE_LINUX,
            self::SYSTEM_TYPE_ASIC,
            self::SYSTEM_TYPE_WINDOWS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['units_count'] = isset($data['units_count']) ? $data['units_count'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : true;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['mirror_url'] = isset($data['mirror_url']) ? $data['mirror_url'] : null;
        $this->container['red_temp'] = isset($data['red_temp']) ? $data['red_temp'] : null;
        $this->container['red_mem_temp'] = isset($data['red_mem_temp']) ? $data['red_mem_temp'] : null;
        $this->container['red_cpu_temp'] = isset($data['red_cpu_temp']) ? $data['red_cpu_temp'] : null;
        $this->container['red_board_temp'] = isset($data['red_board_temp']) ? $data['red_board_temp'] : null;
        $this->container['red_fan'] = isset($data['red_fan']) ? $data['red_fan'] : null;
        $this->container['red_asr'] = isset($data['red_asr']) ? $data['red_asr'] : null;
        $this->container['red_la'] = isset($data['red_la']) ? $data['red_la'] : null;
        $this->container['red_hashrates'] = isset($data['red_hashrates']) ? $data['red_hashrates'] : null;
        $this->container['ip_addresses'] = isset($data['ip_addresses']) ? $data['ip_addresses'] : null;
        $this->container['remote_address'] = isset($data['remote_address']) ? $data['remote_address'] : null;
        $this->container['vpn'] = isset($data['vpn']) ? $data['vpn'] : null;
        $this->container['has_amd'] = isset($data['has_amd']) ? $data['has_amd'] : null;
        $this->container['has_nvidia'] = isset($data['has_nvidia']) ? $data['has_nvidia'] : null;
        $this->container['needs_upgrade'] = isset($data['needs_upgrade']) ? $data['needs_upgrade'] : null;
        $this->container['packages_hash'] = isset($data['packages_hash']) ? $data['packages_hash'] : null;
        $this->container['lan_config'] = isset($data['lan_config']) ? $data['lan_config'] : null;
        $this->container['system_type'] = isset($data['system_type']) ? $data['system_type'] : null;
        $this->container['os_name'] = isset($data['os_name']) ? $data['os_name'] : null;
        $this->container['has_octofan'] = isset($data['has_octofan']) ? $data['has_octofan'] : null;
        $this->container['has_coolbox'] = isset($data['has_coolbox']) ? $data['has_coolbox'] : null;
        $this->container['has_fanflap'] = isset($data['has_fanflap']) ? $data['has_fanflap'] : null;
        $this->container['has_powermeter'] = isset($data['has_powermeter']) ? $data['has_powermeter'] : null;
        $this->container['has_asichub'] = isset($data['has_asichub']) ? $data['has_asichub'] : null;
        $this->container['has_donnager_relay'] = isset($data['has_donnager_relay']) ? $data['has_donnager_relay'] : null;
        $this->container['personal_settings'] = isset($data['personal_settings']) ? $data['personal_settings'] : null;
        $this->container['versions'] = isset($data['versions']) ? $data['versions'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['flight_sheet'] = isset($data['flight_sheet']) ? $data['flight_sheet'] : null;
        $this->container['overclock'] = isset($data['overclock']) ? $data['overclock'] : null;
        $this->container['tuned_miners'] = isset($data['tuned_miners']) ? $data['tuned_miners'] : null;
        $this->container['miners_summary'] = isset($data['miners_summary']) ? $data['miners_summary'] : null;
        $this->container['miners_stats'] = isset($data['miners_stats']) ? $data['miners_stats'] : null;
        $this->container['hardware_info'] = isset($data['hardware_info']) ? $data['hardware_info'] : null;
        $this->container['hardware_stats'] = isset($data['hardware_stats']) ? $data['hardware_stats'] : null;
        $this->container['gpu_summary'] = isset($data['gpu_summary']) ? $data['gpu_summary'] : null;
        $this->container['gpu_info'] = isset($data['gpu_info']) ? $data['gpu_info'] : null;
        $this->container['gpu_stats'] = isset($data['gpu_stats']) ? $data['gpu_stats'] : null;
        $this->container['asic_info'] = isset($data['asic_info']) ? $data['asic_info'] : null;
        $this->container['asichub_id'] = isset($data['asichub_id']) ? $data['asichub_id'] : null;
        $this->container['asic_stats'] = isset($data['asic_stats']) ? $data['asic_stats'] : null;
        $this->container['watchdog'] = isset($data['watchdog']) ? $data['watchdog'] : null;
        $this->container['options'] = isset($data['options']) ? $data['options'] : null;
        $this->container['hardware_power_draw'] = isset($data['hardware_power_draw']) ? $data['hardware_power_draw'] : null;
        $this->container['psu_efficiency'] = isset($data['psu_efficiency']) ? $data['psu_efficiency'] : null;
        $this->container['octofan_correct_power'] = isset($data['octofan_correct_power']) ? $data['octofan_correct_power'] : null;
        $this->container['autofan'] = isset($data['autofan']) ? $data['autofan'] : null;
        $this->container['octofan'] = isset($data['octofan']) ? $data['octofan'] : null;
        $this->container['octofan_stats'] = isset($data['octofan_stats']) ? $data['octofan_stats'] : null;
        $this->container['coolbox'] = isset($data['coolbox']) ? $data['coolbox'] : null;
        $this->container['coolbox_info'] = isset($data['coolbox_info']) ? $data['coolbox_info'] : null;
        $this->container['coolbox_stats'] = isset($data['coolbox_stats']) ? $data['coolbox_stats'] : null;
        $this->container['fanflap'] = isset($data['fanflap']) ? $data['fanflap'] : null;
        $this->container['fanflap_stats'] = isset($data['fanflap_stats']) ? $data['fanflap_stats'] : null;
        $this->container['powermeter'] = isset($data['powermeter']) ? $data['powermeter'] : null;
        $this->container['powermeter_stats'] = isset($data['powermeter_stats']) ? $data['powermeter_stats'] : null;
        $this->container['donnager_relay'] = isset($data['donnager_relay']) ? $data['donnager_relay'] : null;
        $this->container['donnager_relay_info'] = isset($data['donnager_relay_info']) ? $data['donnager_relay_info'] : null;
        $this->container['donnager_relay_stats'] = isset($data['donnager_relay_stats']) ? $data['donnager_relay_stats'] : null;
        $this->container['ykeda_autofan'] = isset($data['ykeda_autofan']) ? $data['ykeda_autofan'] : null;
        $this->container['ykeda_autofan_stats'] = isset($data['ykeda_autofan_stats']) ? $data['ykeda_autofan_stats'] : null;
        $this->container['commands'] = isset($data['commands']) ? $data['commands'] : null;
        $this->container['benchmark_id'] = isset($data['benchmark_id']) ? $data['benchmark_id'] : null;
        $this->container['asic_config'] = isset($data['asic_config']) ? $data['asic_config'] : null;
        $this->container['messages_counts'] = isset($data['messages_counts']) ? $data['messages_counts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['units_count']) && ($this->container['units_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'units_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) > 64)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['password']) && (mb_strlen($this->container['password']) < 6)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be bigger than or equal to 6.";
        }

        $allowedValues = $this->getSystemTypeAllowableValues();
        if (!is_null($this->container['system_type']) && !in_array($this->container['system_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'system_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets platform
     *
     * @return \Swagger\Client\Model\Platform
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param \Swagger\Client\Model\Platform $platform platform
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling WorkerListItem., must be smaller than or equal to 50.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling WorkerListItem., must be smaller than or equal to 255.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets units_count
     *
     * @return int
     */
    public function getUnitsCount()
    {
        return $this->container['units_count'];
    }

    /**
     * Sets units_count
     *
     * @param int $units_count units_count
     *
     * @return $this
     */
    public function setUnitsCount($units_count)
    {

        if (!is_null($units_count) && ($units_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $units_count when calling WorkerListItem., must be bigger than or equal to 1.');
        }

        $this->container['units_count'] = $units_count;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        if (!is_null($password) && (mb_strlen($password) > 64)) {
            throw new \InvalidArgumentException('invalid length for $password when calling WorkerListItem., must be smaller than or equal to 64.');
        }
        if (!is_null($password) && (mb_strlen($password) < 6)) {
            throw new \InvalidArgumentException('invalid length for $password when calling WorkerListItem., must be bigger than or equal to 6.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return int[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param int[] $tag_ids tag_ids
     *
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets mirror_url
     *
     * @return \Swagger\Client\Model\MirrorUrl
     */
    public function getMirrorUrl()
    {
        return $this->container['mirror_url'];
    }

    /**
     * Sets mirror_url
     *
     * @param \Swagger\Client\Model\MirrorUrl $mirror_url mirror_url
     *
     * @return $this
     */
    public function setMirrorUrl($mirror_url)
    {
        $this->container['mirror_url'] = $mirror_url;

        return $this;
    }

    /**
     * Gets red_temp
     *
     * @return int
     */
    public function getRedTemp()
    {
        return $this->container['red_temp'];
    }

    /**
     * Sets red_temp
     *
     * @param int $red_temp Red Temperature, °C
     *
     * @return $this
     */
    public function setRedTemp($red_temp)
    {
        $this->container['red_temp'] = $red_temp;

        return $this;
    }

    /**
     * Gets red_mem_temp
     *
     * @return float
     */
    public function getRedMemTemp()
    {
        return $this->container['red_mem_temp'];
    }

    /**
     * Sets red_mem_temp
     *
     * @param float $red_mem_temp Red memory temperature (for rigs), °C
     *
     * @return $this
     */
    public function setRedMemTemp($red_mem_temp)
    {
        $this->container['red_mem_temp'] = $red_mem_temp;

        return $this;
    }

    /**
     * Gets red_cpu_temp
     *
     * @return float
     */
    public function getRedCpuTemp()
    {
        return $this->container['red_cpu_temp'];
    }

    /**
     * Sets red_cpu_temp
     *
     * @param float $red_cpu_temp Red CPU temperature (for rigs), °C
     *
     * @return $this
     */
    public function setRedCpuTemp($red_cpu_temp)
    {
        $this->container['red_cpu_temp'] = $red_cpu_temp;

        return $this;
    }

    /**
     * Gets red_board_temp
     *
     * @return float
     */
    public function getRedBoardTemp()
    {
        return $this->container['red_board_temp'];
    }

    /**
     * Sets red_board_temp
     *
     * @param float $red_board_temp Red Board Temperature (for ASICs), °C
     *
     * @return $this
     */
    public function setRedBoardTemp($red_board_temp)
    {
        $this->container['red_board_temp'] = $red_board_temp;

        return $this;
    }

    /**
     * Gets red_fan
     *
     * @return int
     */
    public function getRedFan()
    {
        return $this->container['red_fan'];
    }

    /**
     * Sets red_fan
     *
     * @param int $red_fan Red Fan speed, %
     *
     * @return $this
     */
    public function setRedFan($red_fan)
    {
        $this->container['red_fan'] = $red_fan;

        return $this;
    }

    /**
     * Gets red_asr
     *
     * @return int
     */
    public function getRedAsr()
    {
        return $this->container['red_asr'];
    }

    /**
     * Sets red_asr
     *
     * @param int $red_asr Red Accepted Shares Ratio, %
     *
     * @return $this
     */
    public function setRedAsr($red_asr)
    {
        $this->container['red_asr'] = $red_asr;

        return $this;
    }

    /**
     * Gets red_la
     *
     * @return float
     */
    public function getRedLa()
    {
        return $this->container['red_la'];
    }

    /**
     * Sets red_la
     *
     * @param float $red_la Red Load Average per one CPU core
     *
     * @return $this
     */
    public function setRedLa($red_la)
    {
        $this->container['red_la'] = $red_la;

        return $this;
    }

    /**
     * Gets red_hashrates
     *
     * @return object[]
     */
    public function getRedHashrates()
    {
        return $this->container['red_hashrates'];
    }

    /**
     * Sets red_hashrates
     *
     * @param object[] $red_hashrates Red hashrates per algo
     *
     * @return $this
     */
    public function setRedHashrates($red_hashrates)
    {
        $this->container['red_hashrates'] = $red_hashrates;

        return $this;
    }

    /**
     * Gets ip_addresses
     *
     * @return string[]
     */
    public function getIpAddresses()
    {
        return $this->container['ip_addresses'];
    }

    /**
     * Sets ip_addresses
     *
     * @param string[] $ip_addresses List of assigned ip addresses
     *
     * @return $this
     */
    public function setIpAddresses($ip_addresses)
    {
        $this->container['ip_addresses'] = $ip_addresses;

        return $this;
    }

    /**
     * Gets remote_address
     *
     * @return object
     */
    public function getRemoteAddress()
    {
        return $this->container['remote_address'];
    }

    /**
     * Sets remote_address
     *
     * @param object $remote_address Remote address info
     *
     * @return $this
     */
    public function setRemoteAddress($remote_address)
    {
        $this->container['remote_address'] = $remote_address;

        return $this;
    }

    /**
     * Gets vpn
     *
     * @return bool
     */
    public function getVpn()
    {
        return $this->container['vpn'];
    }

    /**
     * Sets vpn
     *
     * @param bool $vpn VPN is configured
     *
     * @return $this
     */
    public function setVpn($vpn)
    {
        $this->container['vpn'] = $vpn;

        return $this;
    }

    /**
     * Gets has_amd
     *
     * @return bool
     */
    public function getHasAmd()
    {
        return $this->container['has_amd'];
    }

    /**
     * Sets has_amd
     *
     * @param bool $has_amd Worker has AMD GPUs
     *
     * @return $this
     */
    public function setHasAmd($has_amd)
    {
        $this->container['has_amd'] = $has_amd;

        return $this;
    }

    /**
     * Gets has_nvidia
     *
     * @return bool
     */
    public function getHasNvidia()
    {
        return $this->container['has_nvidia'];
    }

    /**
     * Sets has_nvidia
     *
     * @param bool $has_nvidia Worker has Nvidia GPUs
     *
     * @return $this
     */
    public function setHasNvidia($has_nvidia)
    {
        $this->container['has_nvidia'] = $has_nvidia;

        return $this;
    }

    /**
     * Gets needs_upgrade
     *
     * @return bool
     */
    public function getNeedsUpgrade()
    {
        return $this->container['needs_upgrade'];
    }

    /**
     * Sets needs_upgrade
     *
     * @param bool $needs_upgrade New OS version is available
     *
     * @return $this
     */
    public function setNeedsUpgrade($needs_upgrade)
    {
        $this->container['needs_upgrade'] = $needs_upgrade;

        return $this;
    }

    /**
     * Gets packages_hash
     *
     * @return string
     */
    public function getPackagesHash()
    {
        return $this->container['packages_hash'];
    }

    /**
     * Sets packages_hash
     *
     * @param string $packages_hash packages_hash
     *
     * @return $this
     */
    public function setPackagesHash($packages_hash)
    {
        $this->container['packages_hash'] = $packages_hash;

        return $this;
    }

    /**
     * Gets lan_config
     *
     * @return object
     */
    public function getLanConfig()
    {
        return $this->container['lan_config'];
    }

    /**
     * Sets lan_config
     *
     * @param object $lan_config LAN configuration
     *
     * @return $this
     */
    public function setLanConfig($lan_config)
    {
        $this->container['lan_config'] = $lan_config;

        return $this;
    }

    /**
     * Gets system_type
     *
     * @return string
     */
    public function getSystemType()
    {
        return $this->container['system_type'];
    }

    /**
     * Sets system_type
     *
     * @param string $system_type Hive OS system type
     *
     * @return $this
     */
    public function setSystemType($system_type)
    {
        $allowedValues = $this->getSystemTypeAllowableValues();
        if (!is_null($system_type) && !in_array($system_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'system_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['system_type'] = $system_type;

        return $this;
    }

    /**
     * Gets os_name
     *
     * @return string
     */
    public function getOsName()
    {
        return $this->container['os_name'];
    }

    /**
     * Sets os_name
     *
     * @param string $os_name os_name
     *
     * @return $this
     */
    public function setOsName($os_name)
    {
        $this->container['os_name'] = $os_name;

        return $this;
    }

    /**
     * Gets has_octofan
     *
     * @return bool
     */
    public function getHasOctofan()
    {
        return $this->container['has_octofan'];
    }

    /**
     * Sets has_octofan
     *
     * @param bool $has_octofan Worker has Octominer fan controller
     *
     * @return $this
     */
    public function setHasOctofan($has_octofan)
    {
        $this->container['has_octofan'] = $has_octofan;

        return $this;
    }

    /**
     * Gets has_coolbox
     *
     * @return bool
     */
    public function getHasCoolbox()
    {
        return $this->container['has_coolbox'];
    }

    /**
     * Sets has_coolbox
     *
     * @param bool $has_coolbox Worker has Coolbox fan controller
     *
     * @return $this
     */
    public function setHasCoolbox($has_coolbox)
    {
        $this->container['has_coolbox'] = $has_coolbox;

        return $this;
    }

    /**
     * Gets has_fanflap
     *
     * @return bool
     */
    public function getHasFanflap()
    {
        return $this->container['has_fanflap'];
    }

    /**
     * Sets has_fanflap
     *
     * @param bool $has_fanflap Worker has FanFlap controller
     *
     * @return $this
     */
    public function setHasFanflap($has_fanflap)
    {
        $this->container['has_fanflap'] = $has_fanflap;

        return $this;
    }

    /**
     * Gets has_powermeter
     *
     * @return bool
     */
    public function getHasPowermeter()
    {
        return $this->container['has_powermeter'];
    }

    /**
     * Sets has_powermeter
     *
     * @param bool $has_powermeter Worker has Powermeter controller
     *
     * @return $this
     */
    public function setHasPowermeter($has_powermeter)
    {
        $this->container['has_powermeter'] = $has_powermeter;

        return $this;
    }

    /**
     * Gets has_asichub
     *
     * @return bool
     */
    public function getHasAsichub()
    {
        return $this->container['has_asichub'];
    }

    /**
     * Sets has_asichub
     *
     * @param bool $has_asichub Worker is an ASIC Hub
     *
     * @return $this
     */
    public function setHasAsichub($has_asichub)
    {
        $this->container['has_asichub'] = $has_asichub;

        return $this;
    }

    /**
     * Gets has_donnager_relay
     *
     * @return bool
     */
    public function getHasDonnagerRelay()
    {
        return $this->container['has_donnager_relay'];
    }

    /**
     * Sets has_donnager_relay
     *
     * @param bool $has_donnager_relay Worker is a Donnager Relay controller
     *
     * @return $this
     */
    public function setHasDonnagerRelay($has_donnager_relay)
    {
        $this->container['has_donnager_relay'] = $has_donnager_relay;

        return $this;
    }

    /**
     * Gets personal_settings
     *
     * @return object
     */
    public function getPersonalSettings()
    {
        return $this->container['personal_settings'];
    }

    /**
     * Sets personal_settings
     *
     * @param object $personal_settings Personal settings for current user
     *
     * @return $this
     */
    public function setPersonalSettings($personal_settings)
    {
        $this->container['personal_settings'] = $personal_settings;

        return $this;
    }

    /**
     * Gets versions
     *
     * @return object
     */
    public function getVersions()
    {
        return $this->container['versions'];
    }

    /**
     * Sets versions
     *
     * @param object $versions versions
     *
     * @return $this
     */
    public function setVersions($versions)
    {
        $this->container['versions'] = $versions;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return object
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param object $stats Worker stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets flight_sheet
     *
     * @return \Swagger\Client\Model\FSMidInfo
     */
    public function getFlightSheet()
    {
        return $this->container['flight_sheet'];
    }

    /**
     * Sets flight_sheet
     *
     * @param \Swagger\Client\Model\FSMidInfo $flight_sheet flight_sheet
     *
     * @return $this
     */
    public function setFlightSheet($flight_sheet)
    {
        $this->container['flight_sheet'] = $flight_sheet;

        return $this;
    }

    /**
     * Gets overclock
     *
     * @return object
     */
    public function getOverclock()
    {
        return $this->container['overclock'];
    }

    /**
     * Sets overclock
     *
     * @param object $overclock Actually applied overclock
     *
     * @return $this
     */
    public function setOverclock($overclock)
    {
        $this->container['overclock'] = $overclock;

        return $this;
    }

    /**
     * Gets tuned_miners
     *
     * @return \Swagger\Client\Model\MinerName[]
     */
    public function getTunedMiners()
    {
        return $this->container['tuned_miners'];
    }

    /**
     * Sets tuned_miners
     *
     * @param \Swagger\Client\Model\MinerName[] $tuned_miners List of miner names from active flight sheet that are tuned in this worker.
     *
     * @return $this
     */
    public function setTunedMiners($tuned_miners)
    {
        $this->container['tuned_miners'] = $tuned_miners;

        return $this;
    }

    /**
     * Gets miners_summary
     *
     * @return object
     */
    public function getMinersSummary()
    {
        return $this->container['miners_summary'];
    }

    /**
     * Sets miners_summary
     *
     * @param object $miners_summary miners_summary
     *
     * @return $this
     */
    public function setMinersSummary($miners_summary)
    {
        $this->container['miners_summary'] = $miners_summary;

        return $this;
    }

    /**
     * Gets miners_stats
     *
     * @return object
     */
    public function getMinersStats()
    {
        return $this->container['miners_stats'];
    }

    /**
     * Sets miners_stats
     *
     * @param object $miners_stats miners_stats
     *
     * @return $this
     */
    public function setMinersStats($miners_stats)
    {
        $this->container['miners_stats'] = $miners_stats;

        return $this;
    }

    /**
     * Gets hardware_info
     *
     * @return object
     */
    public function getHardwareInfo()
    {
        return $this->container['hardware_info'];
    }

    /**
     * Sets hardware_info
     *
     * @param object $hardware_info Hardware information
     *
     * @return $this
     */
    public function setHardwareInfo($hardware_info)
    {
        $this->container['hardware_info'] = $hardware_info;

        return $this;
    }

    /**
     * Gets hardware_stats
     *
     * @return object
     */
    public function getHardwareStats()
    {
        return $this->container['hardware_stats'];
    }

    /**
     * Sets hardware_stats
     *
     * @param object $hardware_stats Hardware stats
     *
     * @return $this
     */
    public function setHardwareStats($hardware_stats)
    {
        $this->container['hardware_stats'] = $hardware_stats;

        return $this;
    }

    /**
     * Gets gpu_summary
     *
     * @return object
     */
    public function getGpuSummary()
    {
        return $this->container['gpu_summary'];
    }

    /**
     * Sets gpu_summary
     *
     * @param object $gpu_summary GPU summary stats
     *
     * @return $this
     */
    public function setGpuSummary($gpu_summary)
    {
        $this->container['gpu_summary'] = $gpu_summary;

        return $this;
    }

    /**
     * Gets gpu_info
     *
     * @return \Swagger\Client\Model\GpuInfo[]
     */
    public function getGpuInfo()
    {
        return $this->container['gpu_info'];
    }

    /**
     * Sets gpu_info
     *
     * @param \Swagger\Client\Model\GpuInfo[] $gpu_info GPU information
     *
     * @return $this
     */
    public function setGpuInfo($gpu_info)
    {
        $this->container['gpu_info'] = $gpu_info;

        return $this;
    }

    /**
     * Gets gpu_stats
     *
     * @return object[]
     */
    public function getGpuStats()
    {
        return $this->container['gpu_stats'];
    }

    /**
     * Sets gpu_stats
     *
     * @param object[] $gpu_stats GPU stats
     *
     * @return $this
     */
    public function setGpuStats($gpu_stats)
    {
        $this->container['gpu_stats'] = $gpu_stats;

        return $this;
    }

    /**
     * Gets asic_info
     *
     * @return object
     */
    public function getAsicInfo()
    {
        return $this->container['asic_info'];
    }

    /**
     * Sets asic_info
     *
     * @param object $asic_info ASIC information
     *
     * @return $this
     */
    public function setAsicInfo($asic_info)
    {
        $this->container['asic_info'] = $asic_info;

        return $this;
    }

    /**
     * Gets asichub_id
     *
     * @return int
     */
    public function getAsichubId()
    {
        return $this->container['asichub_id'];
    }

    /**
     * Sets asichub_id
     *
     * @param int $asichub_id ID of AsicHUB which manages this ASIC
     *
     * @return $this
     */
    public function setAsichubId($asichub_id)
    {
        $this->container['asichub_id'] = $asichub_id;

        return $this;
    }

    /**
     * Gets asic_stats
     *
     * @return object
     */
    public function getAsicStats()
    {
        return $this->container['asic_stats'];
    }

    /**
     * Sets asic_stats
     *
     * @param object $asic_stats ASIC stats
     *
     * @return $this
     */
    public function setAsicStats($asic_stats)
    {
        $this->container['asic_stats'] = $asic_stats;

        return $this;
    }

    /**
     * Gets watchdog
     *
     * @return object
     */
    public function getWatchdog()
    {
        return $this->container['watchdog'];
    }

    /**
     * Sets watchdog
     *
     * @param object $watchdog Watchdog system
     *
     * @return $this
     */
    public function setWatchdog($watchdog)
    {
        $this->container['watchdog'] = $watchdog;

        return $this;
    }

    /**
     * Gets options
     *
     * @return object
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param object $options Worker options. This object will be merged with existing one on update.
     *
     * @return $this
     */
    public function setOptions($options)
    {
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets hardware_power_draw
     *
     * @return int
     */
    public function getHardwarePowerDraw()
    {
        return $this->container['hardware_power_draw'];
    }

    /**
     * Sets hardware_power_draw
     *
     * @param int $hardware_power_draw Power consumption of worker's hardware, watts
     *
     * @return $this
     */
    public function setHardwarePowerDraw($hardware_power_draw)
    {
        $this->container['hardware_power_draw'] = $hardware_power_draw;

        return $this;
    }

    /**
     * Gets psu_efficiency
     *
     * @return int
     */
    public function getPsuEfficiency()
    {
        return $this->container['psu_efficiency'];
    }

    /**
     * Sets psu_efficiency
     *
     * @param int $psu_efficiency Efficiency of power supply unit, %
     *
     * @return $this
     */
    public function setPsuEfficiency($psu_efficiency)
    {
        $this->container['psu_efficiency'] = $psu_efficiency;

        return $this;
    }

    /**
     * Gets octofan_correct_power
     *
     * @return bool
     */
    public function getOctofanCorrectPower()
    {
        return $this->container['octofan_correct_power'];
    }

    /**
     * Sets octofan_correct_power
     *
     * @param bool $octofan_correct_power Apply power correction settings to power consumption value from Octominer fan controller. Default is false.
     *
     * @return $this
     */
    public function setOctofanCorrectPower($octofan_correct_power)
    {
        $this->container['octofan_correct_power'] = $octofan_correct_power;

        return $this;
    }

    /**
     * Gets autofan
     *
     * @return object
     */
    public function getAutofan()
    {
        return $this->container['autofan'];
    }

    /**
     * Sets autofan
     *
     * @param object $autofan Autofan configuration
     *
     * @return $this
     */
    public function setAutofan($autofan)
    {
        $this->container['autofan'] = $autofan;

        return $this;
    }

    /**
     * Gets octofan
     *
     * @return object
     */
    public function getOctofan()
    {
        return $this->container['octofan'];
    }

    /**
     * Sets octofan
     *
     * @param object $octofan Configuration for Octominer fan controller
     *
     * @return $this
     */
    public function setOctofan($octofan)
    {
        $this->container['octofan'] = $octofan;

        return $this;
    }

    /**
     * Gets octofan_stats
     *
     * @return object
     */
    public function getOctofanStats()
    {
        return $this->container['octofan_stats'];
    }

    /**
     * Sets octofan_stats
     *
     * @param object $octofan_stats Octominer's fan controller stats
     *
     * @return $this
     */
    public function setOctofanStats($octofan_stats)
    {
        $this->container['octofan_stats'] = $octofan_stats;

        return $this;
    }

    /**
     * Gets coolbox
     *
     * @return object
     */
    public function getCoolbox()
    {
        return $this->container['coolbox'];
    }

    /**
     * Sets coolbox
     *
     * @param object $coolbox Configuration for Coolbox fan controller
     *
     * @return $this
     */
    public function setCoolbox($coolbox)
    {
        $this->container['coolbox'] = $coolbox;

        return $this;
    }

    /**
     * Gets coolbox_info
     *
     * @return object
     */
    public function getCoolboxInfo()
    {
        return $this->container['coolbox_info'];
    }

    /**
     * Sets coolbox_info
     *
     * @param object $coolbox_info Information about installed Ykeda Autofan controller
     *
     * @return $this
     */
    public function setCoolboxInfo($coolbox_info)
    {
        $this->container['coolbox_info'] = $coolbox_info;

        return $this;
    }

    /**
     * Gets coolbox_stats
     *
     * @return object
     */
    public function getCoolboxStats()
    {
        return $this->container['coolbox_stats'];
    }

    /**
     * Sets coolbox_stats
     *
     * @param object $coolbox_stats Coolbox fan controller stats
     *
     * @return $this
     */
    public function setCoolboxStats($coolbox_stats)
    {
        $this->container['coolbox_stats'] = $coolbox_stats;

        return $this;
    }

    /**
     * Gets fanflap
     *
     * @return object
     */
    public function getFanflap()
    {
        return $this->container['fanflap'];
    }

    /**
     * Sets fanflap
     *
     * @param object $fanflap Configuration for FanFlap controller
     *
     * @return $this
     */
    public function setFanflap($fanflap)
    {
        $this->container['fanflap'] = $fanflap;

        return $this;
    }

    /**
     * Gets fanflap_stats
     *
     * @return \Swagger\Client\Model\FanflapStats
     */
    public function getFanflapStats()
    {
        return $this->container['fanflap_stats'];
    }

    /**
     * Sets fanflap_stats
     *
     * @param \Swagger\Client\Model\FanflapStats $fanflap_stats fanflap_stats
     *
     * @return $this
     */
    public function setFanflapStats($fanflap_stats)
    {
        $this->container['fanflap_stats'] = $fanflap_stats;

        return $this;
    }

    /**
     * Gets powermeter
     *
     * @return object
     */
    public function getPowermeter()
    {
        return $this->container['powermeter'];
    }

    /**
     * Sets powermeter
     *
     * @param object $powermeter Configuration for Powermeter controller
     *
     * @return $this
     */
    public function setPowermeter($powermeter)
    {
        $this->container['powermeter'] = $powermeter;

        return $this;
    }

    /**
     * Gets powermeter_stats
     *
     * @return \Swagger\Client\Model\PowermeterStats
     */
    public function getPowermeterStats()
    {
        return $this->container['powermeter_stats'];
    }

    /**
     * Sets powermeter_stats
     *
     * @param \Swagger\Client\Model\PowermeterStats $powermeter_stats powermeter_stats
     *
     * @return $this
     */
    public function setPowermeterStats($powermeter_stats)
    {
        $this->container['powermeter_stats'] = $powermeter_stats;

        return $this;
    }

    /**
     * Gets donnager_relay
     *
     * @return object
     */
    public function getDonnagerRelay()
    {
        return $this->container['donnager_relay'];
    }

    /**
     * Sets donnager_relay
     *
     * @param object $donnager_relay Donnager Relay configuration
     *
     * @return $this
     */
    public function setDonnagerRelay($donnager_relay)
    {
        $this->container['donnager_relay'] = $donnager_relay;

        return $this;
    }

    /**
     * Gets donnager_relay_info
     *
     * @return object
     */
    public function getDonnagerRelayInfo()
    {
        return $this->container['donnager_relay_info'];
    }

    /**
     * Sets donnager_relay_info
     *
     * @param object $donnager_relay_info Donnager Relay information
     *
     * @return $this
     */
    public function setDonnagerRelayInfo($donnager_relay_info)
    {
        $this->container['donnager_relay_info'] = $donnager_relay_info;

        return $this;
    }

    /**
     * Gets donnager_relay_stats
     *
     * @return object
     */
    public function getDonnagerRelayStats()
    {
        return $this->container['donnager_relay_stats'];
    }

    /**
     * Sets donnager_relay_stats
     *
     * @param object $donnager_relay_stats Donnager Relay stats
     *
     * @return $this
     */
    public function setDonnagerRelayStats($donnager_relay_stats)
    {
        $this->container['donnager_relay_stats'] = $donnager_relay_stats;

        return $this;
    }

    /**
     * Gets ykeda_autofan
     *
     * @return object
     */
    public function getYkedaAutofan()
    {
        return $this->container['ykeda_autofan'];
    }

    /**
     * Sets ykeda_autofan
     *
     * @param object $ykeda_autofan Configuration for Ykeda Autofan controller
     *
     * @return $this
     */
    public function setYkedaAutofan($ykeda_autofan)
    {
        $this->container['ykeda_autofan'] = $ykeda_autofan;

        return $this;
    }

    /**
     * Gets ykeda_autofan_stats
     *
     * @return object
     */
    public function getYkedaAutofanStats()
    {
        return $this->container['ykeda_autofan_stats'];
    }

    /**
     * Sets ykeda_autofan_stats
     *
     * @param object $ykeda_autofan_stats Ykeda Autofan controller stats
     *
     * @return $this
     */
    public function setYkedaAutofanStats($ykeda_autofan_stats)
    {
        $this->container['ykeda_autofan_stats'] = $ykeda_autofan_stats;

        return $this;
    }

    /**
     * Gets commands
     *
     * @return object[]
     */
    public function getCommands()
    {
        return $this->container['commands'];
    }

    /**
     * Sets commands
     *
     * @param object[] $commands Worker queue commands
     *
     * @return $this
     */
    public function setCommands($commands)
    {
        $this->container['commands'] = $commands;

        return $this;
    }

    /**
     * Gets benchmark_id
     *
     * @return int
     */
    public function getBenchmarkId()
    {
        return $this->container['benchmark_id'];
    }

    /**
     * Sets benchmark_id
     *
     * @param int $benchmark_id ID of currently running benchmark. This field is present until the benchmark is finished.
     *
     * @return $this
     */
    public function setBenchmarkId($benchmark_id)
    {
        $this->container['benchmark_id'] = $benchmark_id;

        return $this;
    }

    /**
     * Gets asic_config
     *
     * @return map[string,string]
     */
    public function getAsicConfig()
    {
        return $this->container['asic_config'];
    }

    /**
     * Sets asic_config
     *
     * @param map[string,string] $asic_config Settings for ASICs with Hive firmware, depends on model and firmware version
     *
     * @return $this
     */
    public function setAsicConfig($asic_config)
    {
        $this->container['asic_config'] = $asic_config;

        return $this;
    }

    /**
     * Gets messages_counts
     *
     * @return object
     */
    public function getMessagesCounts()
    {
        return $this->container['messages_counts'];
    }

    /**
     * Sets messages_counts
     *
     * @param object $messages_counts messages_counts
     *
     * @return $this
     */
    public function setMessagesCounts($messages_counts)
    {
        $this->container['messages_counts'] = $messages_counts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


