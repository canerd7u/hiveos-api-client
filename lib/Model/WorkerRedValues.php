<?php
/**
 * WorkerRedValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WorkerRedValues Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkerRedValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkerRedValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'red_temp' => 'int',
        'red_mem_temp' => 'float',
        'red_cpu_temp' => 'float',
        'red_board_temp' => 'float',
        'red_fan' => 'int',
        'red_asr' => 'int',
        'red_la' => 'float',
        'red_hashrates' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'red_temp' => null,
        'red_mem_temp' => null,
        'red_cpu_temp' => null,
        'red_board_temp' => null,
        'red_fan' => null,
        'red_asr' => null,
        'red_la' => null,
        'red_hashrates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'red_temp' => 'red_temp',
        'red_mem_temp' => 'red_mem_temp',
        'red_cpu_temp' => 'red_cpu_temp',
        'red_board_temp' => 'red_board_temp',
        'red_fan' => 'red_fan',
        'red_asr' => 'red_asr',
        'red_la' => 'red_la',
        'red_hashrates' => 'red_hashrates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'red_temp' => 'setRedTemp',
        'red_mem_temp' => 'setRedMemTemp',
        'red_cpu_temp' => 'setRedCpuTemp',
        'red_board_temp' => 'setRedBoardTemp',
        'red_fan' => 'setRedFan',
        'red_asr' => 'setRedAsr',
        'red_la' => 'setRedLa',
        'red_hashrates' => 'setRedHashrates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'red_temp' => 'getRedTemp',
        'red_mem_temp' => 'getRedMemTemp',
        'red_cpu_temp' => 'getRedCpuTemp',
        'red_board_temp' => 'getRedBoardTemp',
        'red_fan' => 'getRedFan',
        'red_asr' => 'getRedAsr',
        'red_la' => 'getRedLa',
        'red_hashrates' => 'getRedHashrates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['red_temp'] = isset($data['red_temp']) ? $data['red_temp'] : null;
        $this->container['red_mem_temp'] = isset($data['red_mem_temp']) ? $data['red_mem_temp'] : null;
        $this->container['red_cpu_temp'] = isset($data['red_cpu_temp']) ? $data['red_cpu_temp'] : null;
        $this->container['red_board_temp'] = isset($data['red_board_temp']) ? $data['red_board_temp'] : null;
        $this->container['red_fan'] = isset($data['red_fan']) ? $data['red_fan'] : null;
        $this->container['red_asr'] = isset($data['red_asr']) ? $data['red_asr'] : null;
        $this->container['red_la'] = isset($data['red_la']) ? $data['red_la'] : null;
        $this->container['red_hashrates'] = isset($data['red_hashrates']) ? $data['red_hashrates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets red_temp
     *
     * @return int
     */
    public function getRedTemp()
    {
        return $this->container['red_temp'];
    }

    /**
     * Sets red_temp
     *
     * @param int $red_temp Red Temperature, 째C
     *
     * @return $this
     */
    public function setRedTemp($red_temp)
    {
        $this->container['red_temp'] = $red_temp;

        return $this;
    }

    /**
     * Gets red_mem_temp
     *
     * @return float
     */
    public function getRedMemTemp()
    {
        return $this->container['red_mem_temp'];
    }

    /**
     * Sets red_mem_temp
     *
     * @param float $red_mem_temp Red memory temperature (for rigs), 째C
     *
     * @return $this
     */
    public function setRedMemTemp($red_mem_temp)
    {
        $this->container['red_mem_temp'] = $red_mem_temp;

        return $this;
    }

    /**
     * Gets red_cpu_temp
     *
     * @return float
     */
    public function getRedCpuTemp()
    {
        return $this->container['red_cpu_temp'];
    }

    /**
     * Sets red_cpu_temp
     *
     * @param float $red_cpu_temp Red CPU temperature (for rigs), 째C
     *
     * @return $this
     */
    public function setRedCpuTemp($red_cpu_temp)
    {
        $this->container['red_cpu_temp'] = $red_cpu_temp;

        return $this;
    }

    /**
     * Gets red_board_temp
     *
     * @return float
     */
    public function getRedBoardTemp()
    {
        return $this->container['red_board_temp'];
    }

    /**
     * Sets red_board_temp
     *
     * @param float $red_board_temp Red Board Temperature (for ASICs), 째C
     *
     * @return $this
     */
    public function setRedBoardTemp($red_board_temp)
    {
        $this->container['red_board_temp'] = $red_board_temp;

        return $this;
    }

    /**
     * Gets red_fan
     *
     * @return int
     */
    public function getRedFan()
    {
        return $this->container['red_fan'];
    }

    /**
     * Sets red_fan
     *
     * @param int $red_fan Red Fan speed, %
     *
     * @return $this
     */
    public function setRedFan($red_fan)
    {
        $this->container['red_fan'] = $red_fan;

        return $this;
    }

    /**
     * Gets red_asr
     *
     * @return int
     */
    public function getRedAsr()
    {
        return $this->container['red_asr'];
    }

    /**
     * Sets red_asr
     *
     * @param int $red_asr Red Accepted Shares Ratio, %
     *
     * @return $this
     */
    public function setRedAsr($red_asr)
    {
        $this->container['red_asr'] = $red_asr;

        return $this;
    }

    /**
     * Gets red_la
     *
     * @return float
     */
    public function getRedLa()
    {
        return $this->container['red_la'];
    }

    /**
     * Sets red_la
     *
     * @param float $red_la Red Load Average per one CPU core
     *
     * @return $this
     */
    public function setRedLa($red_la)
    {
        $this->container['red_la'] = $red_la;

        return $this;
    }

    /**
     * Gets red_hashrates
     *
     * @return object[]
     */
    public function getRedHashrates()
    {
        return $this->container['red_hashrates'];
    }

    /**
     * Sets red_hashrates
     *
     * @param object[] $red_hashrates Red hashrates per algo
     *
     * @return $this
     */
    public function setRedHashrates($red_hashrates)
    {
        $this->container['red_hashrates'] = $red_hashrates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


