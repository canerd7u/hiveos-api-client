<?php
/**
 * ScheduleU
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ScheduleU Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ScheduleU extends UserId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScheduleU';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'launch_at' => 'int',
        'rrule' => 'string',
        'timezone' => 'string',
        'active' => 'bool',
        'created_at' => 'int',
        'prev_launch_at' => 'int',
        'next_launch_at' => 'int',
        'action' => 'object',
        'target' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'launch_at' => 'timestamp',
        'rrule' => 'RRULE',
        'timezone' => 'timezone',
        'active' => null,
        'created_at' => 'timestamp',
        'prev_launch_at' => 'timestamp',
        'next_launch_at' => 'timestamp',
        'action' => null,
        'target' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'launch_at' => 'launch_at',
        'rrule' => 'rrule',
        'timezone' => 'timezone',
        'active' => 'active',
        'created_at' => 'created_at',
        'prev_launch_at' => 'prev_launch_at',
        'next_launch_at' => 'next_launch_at',
        'action' => 'action',
        'target' => 'target'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'launch_at' => 'setLaunchAt',
        'rrule' => 'setRrule',
        'timezone' => 'setTimezone',
        'active' => 'setActive',
        'created_at' => 'setCreatedAt',
        'prev_launch_at' => 'setPrevLaunchAt',
        'next_launch_at' => 'setNextLaunchAt',
        'action' => 'setAction',
        'target' => 'setTarget'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'launch_at' => 'getLaunchAt',
        'rrule' => 'getRrule',
        'timezone' => 'getTimezone',
        'active' => 'getActive',
        'created_at' => 'getCreatedAt',
        'prev_launch_at' => 'getPrevLaunchAt',
        'next_launch_at' => 'getNextLaunchAt',
        'action' => 'getAction',
        'target' => 'getTarget'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['launch_at'] = isset($data['launch_at']) ? $data['launch_at'] : null;
        $this->container['rrule'] = isset($data['rrule']) ? $data['rrule'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['prev_launch_at'] = isset($data['prev_launch_at']) ? $data['prev_launch_at'] : null;
        $this->container['next_launch_at'] = isset($data['next_launch_at']) ? $data['next_launch_at'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['target'] = isset($data['target']) ? $data['target'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets launch_at
     *
     * @return int
     */
    public function getLaunchAt()
    {
        return $this->container['launch_at'];
    }

    /**
     * Sets launch_at
     *
     * @param int $launch_at When to apply the flight sheet. If rrule is specified - this field defines when the first occurrence will happen.
     *
     * @return $this
     */
    public function setLaunchAt($launch_at)
    {
        $this->container['launch_at'] = $launch_at;

        return $this;
    }

    /**
     * Gets rrule
     *
     * @return string
     */
    public function getRrule()
    {
        return $this->container['rrule'];
    }

    /**
     * Sets rrule
     *
     * @param string $rrule How to repeat the task. This field accepts RRULE definition from RFC 5545.
     *
     * @return $this
     */
    public function setRrule($rrule)
    {
        $this->container['rrule'] = $rrule;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Time zone for RRule. By default farm's or user's time zone is used.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int $created_at When entity was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets prev_launch_at
     *
     * @return int
     */
    public function getPrevLaunchAt()
    {
        return $this->container['prev_launch_at'];
    }

    /**
     * Sets prev_launch_at
     *
     * @param int $prev_launch_at When the task was last executed
     *
     * @return $this
     */
    public function setPrevLaunchAt($prev_launch_at)
    {
        $this->container['prev_launch_at'] = $prev_launch_at;

        return $this;
    }

    /**
     * Gets next_launch_at
     *
     * @return int
     */
    public function getNextLaunchAt()
    {
        return $this->container['next_launch_at'];
    }

    /**
     * Sets next_launch_at
     *
     * @param int $next_launch_at When the task is scheduled for execution
     *
     * @return $this
     */
    public function setNextLaunchAt($next_launch_at)
    {
        $this->container['next_launch_at'] = $next_launch_at;

        return $this;
    }

    /**
     * Gets action
     *
     * @return object
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param object $action Everything defined in this object will be applied to workers
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets target
     *
     * @return object
     */
    public function getTarget()
    {
        return $this->container['target'];
    }

    /**
     * Sets target
     *
     * @param object $target target
     *
     * @return $this
     */
    public function setTarget($target)
    {
        $this->container['target'] = $target;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


