<?php
/**
 * FarmCreateRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * FarmCreateRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FarmCreateRequest extends FarmFields 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FarmCreateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nonfree' => 'bool',
        'tag_ids' => 'int[]',
        'hardware_power_draw' => 'int',
        'psu_efficiency' => 'int',
        'octofan_correct_power' => 'bool',
        'auto_tags' => 'bool',
        'default_fs' => 'map[string,int]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nonfree' => null,
        'tag_ids' => null,
        'hardware_power_draw' => null,
        'psu_efficiency' => null,
        'octofan_correct_power' => null,
        'auto_tags' => null,
        'default_fs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nonfree' => 'nonfree',
        'tag_ids' => 'tag_ids',
        'hardware_power_draw' => 'hardware_power_draw',
        'psu_efficiency' => 'psu_efficiency',
        'octofan_correct_power' => 'octofan_correct_power',
        'auto_tags' => 'auto_tags',
        'default_fs' => 'default_fs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nonfree' => 'setNonfree',
        'tag_ids' => 'setTagIds',
        'hardware_power_draw' => 'setHardwarePowerDraw',
        'psu_efficiency' => 'setPsuEfficiency',
        'octofan_correct_power' => 'setOctofanCorrectPower',
        'auto_tags' => 'setAutoTags',
        'default_fs' => 'setDefaultFs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nonfree' => 'getNonfree',
        'tag_ids' => 'getTagIds',
        'hardware_power_draw' => 'getHardwarePowerDraw',
        'psu_efficiency' => 'getPsuEfficiency',
        'octofan_correct_power' => 'getOctofanCorrectPower',
        'auto_tags' => 'getAutoTags',
        'default_fs' => 'getDefaultFs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['nonfree'] = isset($data['nonfree']) ? $data['nonfree'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['hardware_power_draw'] = isset($data['hardware_power_draw']) ? $data['hardware_power_draw'] : null;
        $this->container['psu_efficiency'] = isset($data['psu_efficiency']) ? $data['psu_efficiency'] : null;
        $this->container['octofan_correct_power'] = isset($data['octofan_correct_power']) ? $data['octofan_correct_power'] : null;
        $this->container['auto_tags'] = isset($data['auto_tags']) ? $data['auto_tags'] : null;
        $this->container['default_fs'] = isset($data['default_fs']) ? $data['default_fs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nonfree
     *
     * @return bool
     */
    public function getNonfree()
    {
        return $this->container['nonfree'];
    }

    /**
     * Sets nonfree
     *
     * @param bool $nonfree Paid features state
     *
     * @return $this
     */
    public function setNonfree($nonfree)
    {
        $this->container['nonfree'] = $nonfree;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return int[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param int[] $tag_ids tag_ids
     *
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets hardware_power_draw
     *
     * @return int
     */
    public function getHardwarePowerDraw()
    {
        return $this->container['hardware_power_draw'];
    }

    /**
     * Sets hardware_power_draw
     *
     * @param int $hardware_power_draw Power consumption of worker's hardware, watts
     *
     * @return $this
     */
    public function setHardwarePowerDraw($hardware_power_draw)
    {
        $this->container['hardware_power_draw'] = $hardware_power_draw;

        return $this;
    }

    /**
     * Gets psu_efficiency
     *
     * @return int
     */
    public function getPsuEfficiency()
    {
        return $this->container['psu_efficiency'];
    }

    /**
     * Sets psu_efficiency
     *
     * @param int $psu_efficiency Efficiency of power supply unit, %
     *
     * @return $this
     */
    public function setPsuEfficiency($psu_efficiency)
    {
        $this->container['psu_efficiency'] = $psu_efficiency;

        return $this;
    }

    /**
     * Gets octofan_correct_power
     *
     * @return bool
     */
    public function getOctofanCorrectPower()
    {
        return $this->container['octofan_correct_power'];
    }

    /**
     * Sets octofan_correct_power
     *
     * @param bool $octofan_correct_power Apply power correction settings to power consumption value from Octominer fan controller. Default is false.
     *
     * @return $this
     */
    public function setOctofanCorrectPower($octofan_correct_power)
    {
        $this->container['octofan_correct_power'] = $octofan_correct_power;

        return $this;
    }

    /**
     * Gets auto_tags
     *
     * @return bool
     */
    public function getAutoTags()
    {
        return $this->container['auto_tags'];
    }

    /**
     * Sets auto_tags
     *
     * @param bool $auto_tags Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.
     *
     * @return $this
     */
    public function setAutoTags($auto_tags)
    {
        $this->container['auto_tags'] = $auto_tags;

        return $this;
    }

    /**
     * Gets default_fs
     *
     * @return map[string,int]
     */
    public function getDefaultFs()
    {
        return $this->container['default_fs'];
    }

    /**
     * Sets default_fs
     *
     * @param map[string,int] $default_fs Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.
     *
     * @return $this
     */
    public function setDefaultFs($default_fs)
    {
        $this->container['default_fs'] = $default_fs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


