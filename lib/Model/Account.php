<?php
/**
 * Account
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Account Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Account implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Account';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'int',
        'profile' => '\Swagger\Client\Model\UserProfile',
        'email_confirmed' => 'bool',
        'balance' => 'float',
        'min_deposit_amount' => 'float',
        'referral_reward' => 'int',
        'referrers_count' => 'int',
        'referrer_workers_count' => 'int',
        'promocode' => 'string',
        'can_set_promocode' => 'bool',
        '_2fa_enabled' => 'bool',
        'whitelist_ips' => 'string[]',
        'ip' => 'string',
        'recent_commands' => 'string[]',
        'farms' => '\Swagger\Client\Model\FarmShortInfoAccount[]',
        'meta' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => null,
        'profile' => null,
        'email_confirmed' => null,
        'balance' => null,
        'min_deposit_amount' => null,
        'referral_reward' => null,
        'referrers_count' => null,
        'referrer_workers_count' => null,
        'promocode' => null,
        'can_set_promocode' => null,
        '_2fa_enabled' => null,
        'whitelist_ips' => null,
        'ip' => null,
        'recent_commands' => null,
        'farms' => null,
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'user_id',
        'profile' => 'profile',
        'email_confirmed' => 'email_confirmed',
        'balance' => 'balance',
        'min_deposit_amount' => 'min_deposit_amount',
        'referral_reward' => 'referral_reward',
        'referrers_count' => 'referrers_count',
        'referrer_workers_count' => 'referrer_workers_count',
        'promocode' => 'promocode',
        'can_set_promocode' => 'can_set_promocode',
        '_2fa_enabled' => '2fa_enabled',
        'whitelist_ips' => 'whitelist_ips',
        'ip' => 'ip',
        'recent_commands' => 'recent_commands',
        'farms' => 'farms',
        'meta' => 'meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'profile' => 'setProfile',
        'email_confirmed' => 'setEmailConfirmed',
        'balance' => 'setBalance',
        'min_deposit_amount' => 'setMinDepositAmount',
        'referral_reward' => 'setReferralReward',
        'referrers_count' => 'setReferrersCount',
        'referrer_workers_count' => 'setReferrerWorkersCount',
        'promocode' => 'setPromocode',
        'can_set_promocode' => 'setCanSetPromocode',
        '_2fa_enabled' => 'set2faEnabled',
        'whitelist_ips' => 'setWhitelistIps',
        'ip' => 'setIp',
        'recent_commands' => 'setRecentCommands',
        'farms' => 'setFarms',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'profile' => 'getProfile',
        'email_confirmed' => 'getEmailConfirmed',
        'balance' => 'getBalance',
        'min_deposit_amount' => 'getMinDepositAmount',
        'referral_reward' => 'getReferralReward',
        'referrers_count' => 'getReferrersCount',
        'referrer_workers_count' => 'getReferrerWorkersCount',
        'promocode' => 'getPromocode',
        'can_set_promocode' => 'getCanSetPromocode',
        '_2fa_enabled' => 'get2faEnabled',
        'whitelist_ips' => 'getWhitelistIps',
        'ip' => 'getIp',
        'recent_commands' => 'getRecentCommands',
        'farms' => 'getFarms',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['email_confirmed'] = isset($data['email_confirmed']) ? $data['email_confirmed'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['min_deposit_amount'] = isset($data['min_deposit_amount']) ? $data['min_deposit_amount'] : null;
        $this->container['referral_reward'] = isset($data['referral_reward']) ? $data['referral_reward'] : null;
        $this->container['referrers_count'] = isset($data['referrers_count']) ? $data['referrers_count'] : null;
        $this->container['referrer_workers_count'] = isset($data['referrer_workers_count']) ? $data['referrer_workers_count'] : null;
        $this->container['promocode'] = isset($data['promocode']) ? $data['promocode'] : null;
        $this->container['can_set_promocode'] = isset($data['can_set_promocode']) ? $data['can_set_promocode'] : null;
        $this->container['_2fa_enabled'] = isset($data['_2fa_enabled']) ? $data['_2fa_enabled'] : null;
        $this->container['whitelist_ips'] = isset($data['whitelist_ips']) ? $data['whitelist_ips'] : null;
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['recent_commands'] = isset($data['recent_commands']) ? $data['recent_commands'] : null;
        $this->container['farms'] = isset($data['farms']) ? $data['farms'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Swagger\Client\Model\UserProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Swagger\Client\Model\UserProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets email_confirmed
     *
     * @return bool
     */
    public function getEmailConfirmed()
    {
        return $this->container['email_confirmed'];
    }

    /**
     * Sets email_confirmed
     *
     * @param bool $email_confirmed email_confirmed
     *
     * @return $this
     */
    public function setEmailConfirmed($email_confirmed)
    {
        $this->container['email_confirmed'] = $email_confirmed;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance Balance
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets min_deposit_amount
     *
     * @return float
     */
    public function getMinDepositAmount()
    {
        return $this->container['min_deposit_amount'];
    }

    /**
     * Sets min_deposit_amount
     *
     * @param float $min_deposit_amount Minimum deposit amount to get 30% bonus
     *
     * @return $this
     */
    public function setMinDepositAmount($min_deposit_amount)
    {
        $this->container['min_deposit_amount'] = $min_deposit_amount;

        return $this;
    }

    /**
     * Gets referral_reward
     *
     * @return int
     */
    public function getReferralReward()
    {
        return $this->container['referral_reward'];
    }

    /**
     * Sets referral_reward
     *
     * @param int $referral_reward Reward in % from referrer payments
     *
     * @return $this
     */
    public function setReferralReward($referral_reward)
    {
        $this->container['referral_reward'] = $referral_reward;

        return $this;
    }

    /**
     * Gets referrers_count
     *
     * @return int
     */
    public function getReferrersCount()
    {
        return $this->container['referrers_count'];
    }

    /**
     * Sets referrers_count
     *
     * @param int $referrers_count Amount of users who were registered as current user's referral
     *
     * @return $this
     */
    public function setReferrersCount($referrers_count)
    {
        $this->container['referrers_count'] = $referrers_count;

        return $this;
    }

    /**
     * Gets referrer_workers_count
     *
     * @return int
     */
    public function getReferrerWorkersCount()
    {
        return $this->container['referrer_workers_count'];
    }

    /**
     * Sets referrer_workers_count
     *
     * @param int $referrer_workers_count Amount of workers that were created as current user's referral
     *
     * @return $this
     */
    public function setReferrerWorkersCount($referrer_workers_count)
    {
        $this->container['referrer_workers_count'] = $referrer_workers_count;

        return $this;
    }

    /**
     * Gets promocode
     *
     * @return string
     */
    public function getPromocode()
    {
        return $this->container['promocode'];
    }

    /**
     * Sets promocode
     *
     * @param string $promocode Referral promocode
     *
     * @return $this
     */
    public function setPromocode($promocode)
    {
        $this->container['promocode'] = $promocode;

        return $this;
    }

    /**
     * Gets can_set_promocode
     *
     * @return bool
     */
    public function getCanSetPromocode()
    {
        return $this->container['can_set_promocode'];
    }

    /**
     * Sets can_set_promocode
     *
     * @param bool $can_set_promocode Only accounts older than 14 days can set promocode
     *
     * @return $this
     */
    public function setCanSetPromocode($can_set_promocode)
    {
        $this->container['can_set_promocode'] = $can_set_promocode;

        return $this;
    }

    /**
     * Gets _2fa_enabled
     *
     * @return bool
     */
    public function get2faEnabled()
    {
        return $this->container['_2fa_enabled'];
    }

    /**
     * Sets _2fa_enabled
     *
     * @param bool $_2fa_enabled Indicates that Two Factor Authentication (2FA) is enabled for this account
     *
     * @return $this
     */
    public function set2faEnabled($_2fa_enabled)
    {
        $this->container['_2fa_enabled'] = $_2fa_enabled;

        return $this;
    }

    /**
     * Gets whitelist_ips
     *
     * @return string[]
     */
    public function getWhitelistIps()
    {
        return $this->container['whitelist_ips'];
    }

    /**
     * Sets whitelist_ips
     *
     * @param string[] $whitelist_ips whitelist_ips
     *
     * @return $this
     */
    public function setWhitelistIps($whitelist_ips)
    {
        $this->container['whitelist_ips'] = $whitelist_ips;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip Current IP address
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets recent_commands
     *
     * @return string[]
     */
    public function getRecentCommands()
    {
        return $this->container['recent_commands'];
    }

    /**
     * Sets recent_commands
     *
     * @param string[] $recent_commands Recently executed custom commands (via exec). Maximum 10 unique commands are stored.
     *
     * @return $this
     */
    public function setRecentCommands($recent_commands)
    {
        $this->container['recent_commands'] = $recent_commands;

        return $this;
    }

    /**
     * Gets farms
     *
     * @return \Swagger\Client\Model\FarmShortInfoAccount[]
     */
    public function getFarms()
    {
        return $this->container['farms'];
    }

    /**
     * Sets farms
     *
     * @param \Swagger\Client\Model\FarmShortInfoAccount[] $farms Farms list
     *
     * @return $this
     */
    public function setFarms($farms)
    {
        $this->container['farms'] = $farms;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta Meta data keyed by namespace
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


