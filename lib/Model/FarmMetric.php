<?php
/**
 * FarmMetric
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FarmMetric Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FarmMetric implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FarmMetric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time' => 'int',
        'rigs' => 'int',
        'gpus' => 'int',
        'asics' => 'int',
        'boards' => 'int',
        'power' => 'int',
        'rigs_power' => 'int',
        'asics_power' => 'int',
        'hashrates' => 'object[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time' => 'timestamp',
        'rigs' => null,
        'gpus' => null,
        'asics' => null,
        'boards' => null,
        'power' => null,
        'rigs_power' => null,
        'asics_power' => null,
        'hashrates' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time' => 'time',
        'rigs' => 'rigs',
        'gpus' => 'gpus',
        'asics' => 'asics',
        'boards' => 'boards',
        'power' => 'power',
        'rigs_power' => 'rigs_power',
        'asics_power' => 'asics_power',
        'hashrates' => 'hashrates'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time' => 'setTime',
        'rigs' => 'setRigs',
        'gpus' => 'setGpus',
        'asics' => 'setAsics',
        'boards' => 'setBoards',
        'power' => 'setPower',
        'rigs_power' => 'setRigsPower',
        'asics_power' => 'setAsicsPower',
        'hashrates' => 'setHashrates'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time' => 'getTime',
        'rigs' => 'getRigs',
        'gpus' => 'getGpus',
        'asics' => 'getAsics',
        'boards' => 'getBoards',
        'power' => 'getPower',
        'rigs_power' => 'getRigsPower',
        'asics_power' => 'getAsicsPower',
        'hashrates' => 'getHashrates'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['rigs'] = isset($data['rigs']) ? $data['rigs'] : null;
        $this->container['gpus'] = isset($data['gpus']) ? $data['gpus'] : null;
        $this->container['asics'] = isset($data['asics']) ? $data['asics'] : null;
        $this->container['boards'] = isset($data['boards']) ? $data['boards'] : null;
        $this->container['power'] = isset($data['power']) ? $data['power'] : null;
        $this->container['rigs_power'] = isset($data['rigs_power']) ? $data['rigs_power'] : null;
        $this->container['asics_power'] = isset($data['asics_power']) ? $data['asics_power'] : null;
        $this->container['hashrates'] = isset($data['hashrates']) ? $data['hashrates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time
     *
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param int $time time
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets rigs
     *
     * @return int
     */
    public function getRigs()
    {
        return $this->container['rigs'];
    }

    /**
     * Sets rigs
     *
     * @param int $rigs Rigs online
     *
     * @return $this
     */
    public function setRigs($rigs)
    {
        $this->container['rigs'] = $rigs;

        return $this;
    }

    /**
     * Gets gpus
     *
     * @return int
     */
    public function getGpus()
    {
        return $this->container['gpus'];
    }

    /**
     * Sets gpus
     *
     * @param int $gpus GPUs online
     *
     * @return $this
     */
    public function setGpus($gpus)
    {
        $this->container['gpus'] = $gpus;

        return $this;
    }

    /**
     * Gets asics
     *
     * @return int
     */
    public function getAsics()
    {
        return $this->container['asics'];
    }

    /**
     * Sets asics
     *
     * @param int $asics ASICs online
     *
     * @return $this
     */
    public function setAsics($asics)
    {
        $this->container['asics'] = $asics;

        return $this;
    }

    /**
     * Gets boards
     *
     * @return int
     */
    public function getBoards()
    {
        return $this->container['boards'];
    }

    /**
     * Sets boards
     *
     * @param int $boards ASIC boards online
     *
     * @return $this
     */
    public function setBoards($boards)
    {
        $this->container['boards'] = $boards;

        return $this;
    }

    /**
     * Gets power
     *
     * @return int
     */
    public function getPower()
    {
        return $this->container['power'];
    }

    /**
     * Sets power
     *
     * @param int $power Total power consumption of all workers, watts
     *
     * @return $this
     */
    public function setPower($power)
    {
        $this->container['power'] = $power;

        return $this;
    }

    /**
     * Gets rigs_power
     *
     * @return int
     */
    public function getRigsPower()
    {
        return $this->container['rigs_power'];
    }

    /**
     * Sets rigs_power
     *
     * @param int $rigs_power Total power consumption of all Rigs, watts
     *
     * @return $this
     */
    public function setRigsPower($rigs_power)
    {
        $this->container['rigs_power'] = $rigs_power;

        return $this;
    }

    /**
     * Gets asics_power
     *
     * @return int
     */
    public function getAsicsPower()
    {
        return $this->container['asics_power'];
    }

    /**
     * Sets asics_power
     *
     * @param int $asics_power Total power consumption of all ASICs, watts
     *
     * @return $this
     */
    public function setAsicsPower($asics_power)
    {
        $this->container['asics_power'] = $asics_power;

        return $this;
    }

    /**
     * Gets hashrates
     *
     * @return object[]
     */
    public function getHashrates()
    {
        return $this->container['hashrates'];
    }

    /**
     * Sets hashrates
     *
     * @param object[] $hashrates Hashrates by algorithm
     *
     * @return $this
     */
    public function setHashrates($hashrates)
    {
        $this->container['hashrates'] = $hashrates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


