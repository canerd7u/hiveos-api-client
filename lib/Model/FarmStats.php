<?php
/**
 * FarmStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FarmStats Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FarmStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FarmStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'workers_total' => 'int',
        'workers_online' => 'int',
        'workers_offline' => 'int',
        'workers_overheated' => 'int',
        'workers_overloaded' => 'int',
        'workers_invalid' => 'int',
        'workers_low_asr' => 'int',
        'rigs_total' => 'int',
        'rigs_online' => 'int',
        'rigs_offline' => 'int',
        'rigs_power' => 'int',
        'gpus_total' => 'int',
        'gpus_online' => 'int',
        'gpus_offline' => 'int',
        'gpus_overheated' => 'int',
        'asics_total' => 'int',
        'asics_online' => 'int',
        'asics_power' => 'int',
        'asics_offline' => 'int',
        'boards_total' => 'int',
        'boards_online' => 'int',
        'boards_offline' => 'int',
        'boards_overheated' => 'int',
        'cpus_online' => 'int',
        'devices_total' => 'int',
        'devices_online' => 'int',
        'devices_offline' => 'int',
        'power_draw' => 'float',
        'power_cost' => 'float',
        'asr' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'workers_total' => null,
        'workers_online' => null,
        'workers_offline' => null,
        'workers_overheated' => null,
        'workers_overloaded' => null,
        'workers_invalid' => null,
        'workers_low_asr' => null,
        'rigs_total' => null,
        'rigs_online' => null,
        'rigs_offline' => null,
        'rigs_power' => null,
        'gpus_total' => null,
        'gpus_online' => null,
        'gpus_offline' => null,
        'gpus_overheated' => null,
        'asics_total' => null,
        'asics_online' => null,
        'asics_power' => null,
        'asics_offline' => null,
        'boards_total' => null,
        'boards_online' => null,
        'boards_offline' => null,
        'boards_overheated' => null,
        'cpus_online' => null,
        'devices_total' => null,
        'devices_online' => null,
        'devices_offline' => null,
        'power_draw' => null,
        'power_cost' => null,
        'asr' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'workers_total' => 'workers_total',
        'workers_online' => 'workers_online',
        'workers_offline' => 'workers_offline',
        'workers_overheated' => 'workers_overheated',
        'workers_overloaded' => 'workers_overloaded',
        'workers_invalid' => 'workers_invalid',
        'workers_low_asr' => 'workers_low_asr',
        'rigs_total' => 'rigs_total',
        'rigs_online' => 'rigs_online',
        'rigs_offline' => 'rigs_offline',
        'rigs_power' => 'rigs_power',
        'gpus_total' => 'gpus_total',
        'gpus_online' => 'gpus_online',
        'gpus_offline' => 'gpus_offline',
        'gpus_overheated' => 'gpus_overheated',
        'asics_total' => 'asics_total',
        'asics_online' => 'asics_online',
        'asics_power' => 'asics_power',
        'asics_offline' => 'asics_offline',
        'boards_total' => 'boards_total',
        'boards_online' => 'boards_online',
        'boards_offline' => 'boards_offline',
        'boards_overheated' => 'boards_overheated',
        'cpus_online' => 'cpus_online',
        'devices_total' => 'devices_total',
        'devices_online' => 'devices_online',
        'devices_offline' => 'devices_offline',
        'power_draw' => 'power_draw',
        'power_cost' => 'power_cost',
        'asr' => 'asr'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'workers_total' => 'setWorkersTotal',
        'workers_online' => 'setWorkersOnline',
        'workers_offline' => 'setWorkersOffline',
        'workers_overheated' => 'setWorkersOverheated',
        'workers_overloaded' => 'setWorkersOverloaded',
        'workers_invalid' => 'setWorkersInvalid',
        'workers_low_asr' => 'setWorkersLowAsr',
        'rigs_total' => 'setRigsTotal',
        'rigs_online' => 'setRigsOnline',
        'rigs_offline' => 'setRigsOffline',
        'rigs_power' => 'setRigsPower',
        'gpus_total' => 'setGpusTotal',
        'gpus_online' => 'setGpusOnline',
        'gpus_offline' => 'setGpusOffline',
        'gpus_overheated' => 'setGpusOverheated',
        'asics_total' => 'setAsicsTotal',
        'asics_online' => 'setAsicsOnline',
        'asics_power' => 'setAsicsPower',
        'asics_offline' => 'setAsicsOffline',
        'boards_total' => 'setBoardsTotal',
        'boards_online' => 'setBoardsOnline',
        'boards_offline' => 'setBoardsOffline',
        'boards_overheated' => 'setBoardsOverheated',
        'cpus_online' => 'setCpusOnline',
        'devices_total' => 'setDevicesTotal',
        'devices_online' => 'setDevicesOnline',
        'devices_offline' => 'setDevicesOffline',
        'power_draw' => 'setPowerDraw',
        'power_cost' => 'setPowerCost',
        'asr' => 'setAsr'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'workers_total' => 'getWorkersTotal',
        'workers_online' => 'getWorkersOnline',
        'workers_offline' => 'getWorkersOffline',
        'workers_overheated' => 'getWorkersOverheated',
        'workers_overloaded' => 'getWorkersOverloaded',
        'workers_invalid' => 'getWorkersInvalid',
        'workers_low_asr' => 'getWorkersLowAsr',
        'rigs_total' => 'getRigsTotal',
        'rigs_online' => 'getRigsOnline',
        'rigs_offline' => 'getRigsOffline',
        'rigs_power' => 'getRigsPower',
        'gpus_total' => 'getGpusTotal',
        'gpus_online' => 'getGpusOnline',
        'gpus_offline' => 'getGpusOffline',
        'gpus_overheated' => 'getGpusOverheated',
        'asics_total' => 'getAsicsTotal',
        'asics_online' => 'getAsicsOnline',
        'asics_power' => 'getAsicsPower',
        'asics_offline' => 'getAsicsOffline',
        'boards_total' => 'getBoardsTotal',
        'boards_online' => 'getBoardsOnline',
        'boards_offline' => 'getBoardsOffline',
        'boards_overheated' => 'getBoardsOverheated',
        'cpus_online' => 'getCpusOnline',
        'devices_total' => 'getDevicesTotal',
        'devices_online' => 'getDevicesOnline',
        'devices_offline' => 'getDevicesOffline',
        'power_draw' => 'getPowerDraw',
        'power_cost' => 'getPowerCost',
        'asr' => 'getAsr'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['workers_total'] = isset($data['workers_total']) ? $data['workers_total'] : null;
        $this->container['workers_online'] = isset($data['workers_online']) ? $data['workers_online'] : null;
        $this->container['workers_offline'] = isset($data['workers_offline']) ? $data['workers_offline'] : null;
        $this->container['workers_overheated'] = isset($data['workers_overheated']) ? $data['workers_overheated'] : null;
        $this->container['workers_overloaded'] = isset($data['workers_overloaded']) ? $data['workers_overloaded'] : null;
        $this->container['workers_invalid'] = isset($data['workers_invalid']) ? $data['workers_invalid'] : null;
        $this->container['workers_low_asr'] = isset($data['workers_low_asr']) ? $data['workers_low_asr'] : null;
        $this->container['rigs_total'] = isset($data['rigs_total']) ? $data['rigs_total'] : null;
        $this->container['rigs_online'] = isset($data['rigs_online']) ? $data['rigs_online'] : null;
        $this->container['rigs_offline'] = isset($data['rigs_offline']) ? $data['rigs_offline'] : null;
        $this->container['rigs_power'] = isset($data['rigs_power']) ? $data['rigs_power'] : null;
        $this->container['gpus_total'] = isset($data['gpus_total']) ? $data['gpus_total'] : null;
        $this->container['gpus_online'] = isset($data['gpus_online']) ? $data['gpus_online'] : null;
        $this->container['gpus_offline'] = isset($data['gpus_offline']) ? $data['gpus_offline'] : null;
        $this->container['gpus_overheated'] = isset($data['gpus_overheated']) ? $data['gpus_overheated'] : null;
        $this->container['asics_total'] = isset($data['asics_total']) ? $data['asics_total'] : null;
        $this->container['asics_online'] = isset($data['asics_online']) ? $data['asics_online'] : null;
        $this->container['asics_power'] = isset($data['asics_power']) ? $data['asics_power'] : null;
        $this->container['asics_offline'] = isset($data['asics_offline']) ? $data['asics_offline'] : null;
        $this->container['boards_total'] = isset($data['boards_total']) ? $data['boards_total'] : null;
        $this->container['boards_online'] = isset($data['boards_online']) ? $data['boards_online'] : null;
        $this->container['boards_offline'] = isset($data['boards_offline']) ? $data['boards_offline'] : null;
        $this->container['boards_overheated'] = isset($data['boards_overheated']) ? $data['boards_overheated'] : null;
        $this->container['cpus_online'] = isset($data['cpus_online']) ? $data['cpus_online'] : null;
        $this->container['devices_total'] = isset($data['devices_total']) ? $data['devices_total'] : null;
        $this->container['devices_online'] = isset($data['devices_online']) ? $data['devices_online'] : null;
        $this->container['devices_offline'] = isset($data['devices_offline']) ? $data['devices_offline'] : null;
        $this->container['power_draw'] = isset($data['power_draw']) ? $data['power_draw'] : null;
        $this->container['power_cost'] = isset($data['power_cost']) ? $data['power_cost'] : null;
        $this->container['asr'] = isset($data['asr']) ? $data['asr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets workers_total
     *
     * @return int
     */
    public function getWorkersTotal()
    {
        return $this->container['workers_total'];
    }

    /**
     * Sets workers_total
     *
     * @param int $workers_total Total amount of workers
     *
     * @return $this
     */
    public function setWorkersTotal($workers_total)
    {
        $this->container['workers_total'] = $workers_total;

        return $this;
    }

    /**
     * Gets workers_online
     *
     * @return int
     */
    public function getWorkersOnline()
    {
        return $this->container['workers_online'];
    }

    /**
     * Sets workers_online
     *
     * @param int $workers_online Amount of online workers
     *
     * @return $this
     */
    public function setWorkersOnline($workers_online)
    {
        $this->container['workers_online'] = $workers_online;

        return $this;
    }

    /**
     * Gets workers_offline
     *
     * @return int
     */
    public function getWorkersOffline()
    {
        return $this->container['workers_offline'];
    }

    /**
     * Sets workers_offline
     *
     * @param int $workers_offline Amount of offline workers
     *
     * @return $this
     */
    public function setWorkersOffline($workers_offline)
    {
        $this->container['workers_offline'] = $workers_offline;

        return $this;
    }

    /**
     * Gets workers_overheated
     *
     * @return int
     */
    public function getWorkersOverheated()
    {
        return $this->container['workers_overheated'];
    }

    /**
     * Sets workers_overheated
     *
     * @param int $workers_overheated Amount of overheated workers (GPUs/boards exceeds red value)
     *
     * @return $this
     */
    public function setWorkersOverheated($workers_overheated)
    {
        $this->container['workers_overheated'] = $workers_overheated;

        return $this;
    }

    /**
     * Gets workers_overloaded
     *
     * @return int
     */
    public function getWorkersOverloaded()
    {
        return $this->container['workers_overloaded'];
    }

    /**
     * Sets workers_overloaded
     *
     * @param int $workers_overloaded Amount of overloaded workers (15m CPU load average exceeds red value)
     *
     * @return $this
     */
    public function setWorkersOverloaded($workers_overloaded)
    {
        $this->container['workers_overloaded'] = $workers_overloaded;

        return $this;
    }

    /**
     * Gets workers_invalid
     *
     * @return int
     */
    public function getWorkersInvalid()
    {
        return $this->container['workers_invalid'];
    }

    /**
     * Sets workers_invalid
     *
     * @param int $workers_invalid Amount of workers with invalid shares
     *
     * @return $this
     */
    public function setWorkersInvalid($workers_invalid)
    {
        $this->container['workers_invalid'] = $workers_invalid;

        return $this;
    }

    /**
     * Gets workers_low_asr
     *
     * @return int
     */
    public function getWorkersLowAsr()
    {
        return $this->container['workers_low_asr'];
    }

    /**
     * Sets workers_low_asr
     *
     * @param int $workers_low_asr Amount of workers with low Accepted Shares Ratio (ASR is below red value)
     *
     * @return $this
     */
    public function setWorkersLowAsr($workers_low_asr)
    {
        $this->container['workers_low_asr'] = $workers_low_asr;

        return $this;
    }

    /**
     * Gets rigs_total
     *
     * @return int
     */
    public function getRigsTotal()
    {
        return $this->container['rigs_total'];
    }

    /**
     * Sets rigs_total
     *
     * @param int $rigs_total Total amount of Rigs
     *
     * @return $this
     */
    public function setRigsTotal($rigs_total)
    {
        $this->container['rigs_total'] = $rigs_total;

        return $this;
    }

    /**
     * Gets rigs_online
     *
     * @return int
     */
    public function getRigsOnline()
    {
        return $this->container['rigs_online'];
    }

    /**
     * Sets rigs_online
     *
     * @param int $rigs_online Amount of online Rigs
     *
     * @return $this
     */
    public function setRigsOnline($rigs_online)
    {
        $this->container['rigs_online'] = $rigs_online;

        return $this;
    }

    /**
     * Gets rigs_offline
     *
     * @return int
     */
    public function getRigsOffline()
    {
        return $this->container['rigs_offline'];
    }

    /**
     * Sets rigs_offline
     *
     * @param int $rigs_offline Amount of offline Rigs
     *
     * @return $this
     */
    public function setRigsOffline($rigs_offline)
    {
        $this->container['rigs_offline'] = $rigs_offline;

        return $this;
    }

    /**
     * Gets rigs_power
     *
     * @return int
     */
    public function getRigsPower()
    {
        return $this->container['rigs_power'];
    }

    /**
     * Sets rigs_power
     *
     * @param int $rigs_power Total power draw of all Rigs, watts
     *
     * @return $this
     */
    public function setRigsPower($rigs_power)
    {
        $this->container['rigs_power'] = $rigs_power;

        return $this;
    }

    /**
     * Gets gpus_total
     *
     * @return int
     */
    public function getGpusTotal()
    {
        return $this->container['gpus_total'];
    }

    /**
     * Sets gpus_total
     *
     * @param int $gpus_total Total amount of GPUs
     *
     * @return $this
     */
    public function setGpusTotal($gpus_total)
    {
        $this->container['gpus_total'] = $gpus_total;

        return $this;
    }

    /**
     * Gets gpus_online
     *
     * @return int
     */
    public function getGpusOnline()
    {
        return $this->container['gpus_online'];
    }

    /**
     * Sets gpus_online
     *
     * @param int $gpus_online Amount of online GPUs
     *
     * @return $this
     */
    public function setGpusOnline($gpus_online)
    {
        $this->container['gpus_online'] = $gpus_online;

        return $this;
    }

    /**
     * Gets gpus_offline
     *
     * @return int
     */
    public function getGpusOffline()
    {
        return $this->container['gpus_offline'];
    }

    /**
     * Sets gpus_offline
     *
     * @param int $gpus_offline Amount of offline GPUs
     *
     * @return $this
     */
    public function setGpusOffline($gpus_offline)
    {
        $this->container['gpus_offline'] = $gpus_offline;

        return $this;
    }

    /**
     * Gets gpus_overheated
     *
     * @return int
     */
    public function getGpusOverheated()
    {
        return $this->container['gpus_overheated'];
    }

    /**
     * Sets gpus_overheated
     *
     * @param int $gpus_overheated Amount of overheated GPUs
     *
     * @return $this
     */
    public function setGpusOverheated($gpus_overheated)
    {
        $this->container['gpus_overheated'] = $gpus_overheated;

        return $this;
    }

    /**
     * Gets asics_total
     *
     * @return int
     */
    public function getAsicsTotal()
    {
        return $this->container['asics_total'];
    }

    /**
     * Sets asics_total
     *
     * @param int $asics_total Total amount of ASICs
     *
     * @return $this
     */
    public function setAsicsTotal($asics_total)
    {
        $this->container['asics_total'] = $asics_total;

        return $this;
    }

    /**
     * Gets asics_online
     *
     * @return int
     */
    public function getAsicsOnline()
    {
        return $this->container['asics_online'];
    }

    /**
     * Sets asics_online
     *
     * @param int $asics_online Amount of online ASICs
     *
     * @return $this
     */
    public function setAsicsOnline($asics_online)
    {
        $this->container['asics_online'] = $asics_online;

        return $this;
    }

    /**
     * Gets asics_power
     *
     * @return int
     */
    public function getAsicsPower()
    {
        return $this->container['asics_power'];
    }

    /**
     * Sets asics_power
     *
     * @param int $asics_power Total power draw of all ASICs, watts
     *
     * @return $this
     */
    public function setAsicsPower($asics_power)
    {
        $this->container['asics_power'] = $asics_power;

        return $this;
    }

    /**
     * Gets asics_offline
     *
     * @return int
     */
    public function getAsicsOffline()
    {
        return $this->container['asics_offline'];
    }

    /**
     * Sets asics_offline
     *
     * @param int $asics_offline Amount of offline ASICs
     *
     * @return $this
     */
    public function setAsicsOffline($asics_offline)
    {
        $this->container['asics_offline'] = $asics_offline;

        return $this;
    }

    /**
     * Gets boards_total
     *
     * @return int
     */
    public function getBoardsTotal()
    {
        return $this->container['boards_total'];
    }

    /**
     * Sets boards_total
     *
     * @param int $boards_total Total amount of ASIC boards
     *
     * @return $this
     */
    public function setBoardsTotal($boards_total)
    {
        $this->container['boards_total'] = $boards_total;

        return $this;
    }

    /**
     * Gets boards_online
     *
     * @return int
     */
    public function getBoardsOnline()
    {
        return $this->container['boards_online'];
    }

    /**
     * Sets boards_online
     *
     * @param int $boards_online Amount of online ASIC boards
     *
     * @return $this
     */
    public function setBoardsOnline($boards_online)
    {
        $this->container['boards_online'] = $boards_online;

        return $this;
    }

    /**
     * Gets boards_offline
     *
     * @return int
     */
    public function getBoardsOffline()
    {
        return $this->container['boards_offline'];
    }

    /**
     * Sets boards_offline
     *
     * @param int $boards_offline Amount of offline ASIC boards
     *
     * @return $this
     */
    public function setBoardsOffline($boards_offline)
    {
        $this->container['boards_offline'] = $boards_offline;

        return $this;
    }

    /**
     * Gets boards_overheated
     *
     * @return int
     */
    public function getBoardsOverheated()
    {
        return $this->container['boards_overheated'];
    }

    /**
     * Sets boards_overheated
     *
     * @param int $boards_overheated Amount of overheated ASIC boards
     *
     * @return $this
     */
    public function setBoardsOverheated($boards_overheated)
    {
        $this->container['boards_overheated'] = $boards_overheated;

        return $this;
    }

    /**
     * Gets cpus_online
     *
     * @return int
     */
    public function getCpusOnline()
    {
        return $this->container['cpus_online'];
    }

    /**
     * Sets cpus_online
     *
     * @param int $cpus_online Amount of online CPUs
     *
     * @return $this
     */
    public function setCpusOnline($cpus_online)
    {
        $this->container['cpus_online'] = $cpus_online;

        return $this;
    }

    /**
     * Gets devices_total
     *
     * @return int
     */
    public function getDevicesTotal()
    {
        return $this->container['devices_total'];
    }

    /**
     * Sets devices_total
     *
     * @param int $devices_total Total amount of Devices
     *
     * @return $this
     */
    public function setDevicesTotal($devices_total)
    {
        $this->container['devices_total'] = $devices_total;

        return $this;
    }

    /**
     * Gets devices_online
     *
     * @return int
     */
    public function getDevicesOnline()
    {
        return $this->container['devices_online'];
    }

    /**
     * Sets devices_online
     *
     * @param int $devices_online Amount of online Devices
     *
     * @return $this
     */
    public function setDevicesOnline($devices_online)
    {
        $this->container['devices_online'] = $devices_online;

        return $this;
    }

    /**
     * Gets devices_offline
     *
     * @return int
     */
    public function getDevicesOffline()
    {
        return $this->container['devices_offline'];
    }

    /**
     * Sets devices_offline
     *
     * @param int $devices_offline Amount of offline Devices
     *
     * @return $this
     */
    public function setDevicesOffline($devices_offline)
    {
        $this->container['devices_offline'] = $devices_offline;

        return $this;
    }

    /**
     * Gets power_draw
     *
     * @return float
     */
    public function getPowerDraw()
    {
        return $this->container['power_draw'];
    }

    /**
     * Sets power_draw
     *
     * @param float $power_draw Total power draw of all workers, watts
     *
     * @return $this
     */
    public function setPowerDraw($power_draw)
    {
        $this->container['power_draw'] = $power_draw;

        return $this;
    }

    /**
     * Gets power_cost
     *
     * @return float
     */
    public function getPowerCost()
    {
        return $this->container['power_cost'];
    }

    /**
     * Sets power_cost
     *
     * @param float $power_cost Consuming electricity cost per hour (in configured currency)
     *
     * @return $this
     */
    public function setPowerCost($power_cost)
    {
        $this->container['power_cost'] = $power_cost;

        return $this;
    }

    /**
     * Gets asr
     *
     * @return float
     */
    public function getAsr()
    {
        return $this->container['asr'];
    }

    /**
     * Sets asr
     *
     * @param float $asr Accepted Shares Ratio, % Calculated as: `accepted_shares / total_shares * 100`
     *
     * @return $this
     */
    public function setAsr($asr)
    {
        $this->container['asr'] = $asr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


