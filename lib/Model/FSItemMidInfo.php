<?php
/**
 * FSItemMidInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FSItemMidInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FSItemMidInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FSItemMidInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coin' => 'string',
        'pool' => 'string',
        'wal_id' => 'int',
        'dcoin' => 'string',
        'dpool' => 'string',
        'dwal_id' => 'int',
        'miner' => '\Swagger\Client\Model\MinerName',
        'miner_alt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coin' => null,
        'pool' => null,
        'wal_id' => null,
        'dcoin' => null,
        'dpool' => null,
        'dwal_id' => null,
        'miner' => null,
        'miner_alt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin' => 'coin',
        'pool' => 'pool',
        'wal_id' => 'wal_id',
        'dcoin' => 'dcoin',
        'dpool' => 'dpool',
        'dwal_id' => 'dwal_id',
        'miner' => 'miner',
        'miner_alt' => 'miner_alt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coin' => 'setCoin',
        'pool' => 'setPool',
        'wal_id' => 'setWalId',
        'dcoin' => 'setDcoin',
        'dpool' => 'setDpool',
        'dwal_id' => 'setDwalId',
        'miner' => 'setMiner',
        'miner_alt' => 'setMinerAlt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coin' => 'getCoin',
        'pool' => 'getPool',
        'wal_id' => 'getWalId',
        'dcoin' => 'getDcoin',
        'dpool' => 'getDpool',
        'dwal_id' => 'getDwalId',
        'miner' => 'getMiner',
        'miner_alt' => 'getMinerAlt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coin'] = isset($data['coin']) ? $data['coin'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['wal_id'] = isset($data['wal_id']) ? $data['wal_id'] : null;
        $this->container['dcoin'] = isset($data['dcoin']) ? $data['dcoin'] : null;
        $this->container['dpool'] = isset($data['dpool']) ? $data['dpool'] : null;
        $this->container['dwal_id'] = isset($data['dwal_id']) ? $data['dwal_id'] : null;
        $this->container['miner'] = isset($data['miner']) ? $data['miner'] : null;
        $this->container['miner_alt'] = isset($data['miner_alt']) ? $data['miner_alt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin Coin name
     *
     * @return $this
     */
    public function setCoin($coin)
    {
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return string
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param string $pool Pool name
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets wal_id
     *
     * @return int
     */
    public function getWalId()
    {
        return $this->container['wal_id'];
    }

    /**
     * Sets wal_id
     *
     * @param int $wal_id Wallet ID
     *
     * @return $this
     */
    public function setWalId($wal_id)
    {
        $this->container['wal_id'] = $wal_id;

        return $this;
    }

    /**
     * Gets dcoin
     *
     * @return string
     */
    public function getDcoin()
    {
        return $this->container['dcoin'];
    }

    /**
     * Sets dcoin
     *
     * @param string $dcoin Second coin name for dual miner
     *
     * @return $this
     */
    public function setDcoin($dcoin)
    {
        $this->container['dcoin'] = $dcoin;

        return $this;
    }

    /**
     * Gets dpool
     *
     * @return string
     */
    public function getDpool()
    {
        return $this->container['dpool'];
    }

    /**
     * Sets dpool
     *
     * @param string $dpool Second pool name for dual miner
     *
     * @return $this
     */
    public function setDpool($dpool)
    {
        $this->container['dpool'] = $dpool;

        return $this;
    }

    /**
     * Gets dwal_id
     *
     * @return int
     */
    public function getDwalId()
    {
        return $this->container['dwal_id'];
    }

    /**
     * Sets dwal_id
     *
     * @param int $dwal_id Second wallet ID
     *
     * @return $this
     */
    public function setDwalId($dwal_id)
    {
        $this->container['dwal_id'] = $dwal_id;

        return $this;
    }

    /**
     * Gets miner
     *
     * @return \Swagger\Client\Model\MinerName
     */
    public function getMiner()
    {
        return $this->container['miner'];
    }

    /**
     * Sets miner
     *
     * @param \Swagger\Client\Model\MinerName $miner miner
     *
     * @return $this
     */
    public function setMiner($miner)
    {
        $this->container['miner'] = $miner;

        return $this;
    }

    /**
     * Gets miner_alt
     *
     * @return string
     */
    public function getMinerAlt()
    {
        return $this->container['miner_alt'];
    }

    /**
     * Sets miner_alt
     *
     * @param string $miner_alt Additional text for miner name. For example fork name or veersion.
     *
     * @return $this
     */
    public function setMinerAlt($miner_alt)
    {
        $this->container['miner_alt'] = $miner_alt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


