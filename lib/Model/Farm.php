<?php
/**
 * Farm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Farm Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Farm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Farm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'timezone' => 'string',
        'gpu_red_temp' => 'int',
        'asic_red_temp' => 'int',
        'asic_red_board_temp' => 'float',
        'gpu_red_mem_temp' => 'float',
        'gpu_red_cpu_temp' => 'float',
        'gpu_red_fan' => 'int',
        'asic_red_fan' => 'int',
        'gpu_red_asr' => 'int',
        'asic_red_asr' => 'int',
        'gpu_red_la' => 'float',
        'asic_red_la' => 'float',
        'repo_urls' => 'string[]',
        'power_price' => 'float',
        'power_price_currency' => 'string',
        'charge_on_pool' => 'bool',
        'autocreate_hash' => 'string',
        'nonfree' => 'bool',
        'locked' => 'bool',
        'twofa_required' => 'bool',
        'trusted' => 'bool',
        'owner' => 'object',
        'payer' => 'object',
        'personal_settings' => 'object',
        'role' => '\Swagger\Client\Model\AccessRoleEnum',
        'workers_count' => 'int',
        'rigs_count' => 'int',
        'asics_count' => 'int',
        'disabled_rigs_count' => 'int',
        'disabled_asics_count' => 'int',
        'money' => 'object',
        'stats' => '\Swagger\Client\Model\FarmStats',
        'hashrates' => 'object[]',
        'hashrates_by_coin' => 'object[]',
        'tag_ids' => 'int[]',
        'hardware_power_draw' => 'int',
        'psu_efficiency' => 'int',
        'octofan_correct_power' => 'bool',
        'auto_tags' => 'bool',
        'default_fs' => 'map[string,int]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'timezone' => 'timezone',
        'gpu_red_temp' => null,
        'asic_red_temp' => null,
        'asic_red_board_temp' => null,
        'gpu_red_mem_temp' => null,
        'gpu_red_cpu_temp' => null,
        'gpu_red_fan' => null,
        'asic_red_fan' => null,
        'gpu_red_asr' => null,
        'asic_red_asr' => null,
        'gpu_red_la' => null,
        'asic_red_la' => null,
        'repo_urls' => 'url',
        'power_price' => null,
        'power_price_currency' => null,
        'charge_on_pool' => null,
        'autocreate_hash' => null,
        'nonfree' => null,
        'locked' => null,
        'twofa_required' => null,
        'trusted' => null,
        'owner' => null,
        'payer' => null,
        'personal_settings' => null,
        'role' => null,
        'workers_count' => null,
        'rigs_count' => null,
        'asics_count' => null,
        'disabled_rigs_count' => null,
        'disabled_asics_count' => null,
        'money' => null,
        'stats' => null,
        'hashrates' => null,
        'hashrates_by_coin' => null,
        'tag_ids' => null,
        'hardware_power_draw' => null,
        'psu_efficiency' => null,
        'octofan_correct_power' => null,
        'auto_tags' => null,
        'default_fs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'timezone' => 'timezone',
        'gpu_red_temp' => 'gpu_red_temp',
        'asic_red_temp' => 'asic_red_temp',
        'asic_red_board_temp' => 'asic_red_board_temp',
        'gpu_red_mem_temp' => 'gpu_red_mem_temp',
        'gpu_red_cpu_temp' => 'gpu_red_cpu_temp',
        'gpu_red_fan' => 'gpu_red_fan',
        'asic_red_fan' => 'asic_red_fan',
        'gpu_red_asr' => 'gpu_red_asr',
        'asic_red_asr' => 'asic_red_asr',
        'gpu_red_la' => 'gpu_red_la',
        'asic_red_la' => 'asic_red_la',
        'repo_urls' => 'repo_urls',
        'power_price' => 'power_price',
        'power_price_currency' => 'power_price_currency',
        'charge_on_pool' => 'charge_on_pool',
        'autocreate_hash' => 'autocreate_hash',
        'nonfree' => 'nonfree',
        'locked' => 'locked',
        'twofa_required' => 'twofa_required',
        'trusted' => 'trusted',
        'owner' => 'owner',
        'payer' => 'payer',
        'personal_settings' => 'personal_settings',
        'role' => 'role',
        'workers_count' => 'workers_count',
        'rigs_count' => 'rigs_count',
        'asics_count' => 'asics_count',
        'disabled_rigs_count' => 'disabled_rigs_count',
        'disabled_asics_count' => 'disabled_asics_count',
        'money' => 'money',
        'stats' => 'stats',
        'hashrates' => 'hashrates',
        'hashrates_by_coin' => 'hashrates_by_coin',
        'tag_ids' => 'tag_ids',
        'hardware_power_draw' => 'hardware_power_draw',
        'psu_efficiency' => 'psu_efficiency',
        'octofan_correct_power' => 'octofan_correct_power',
        'auto_tags' => 'auto_tags',
        'default_fs' => 'default_fs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'timezone' => 'setTimezone',
        'gpu_red_temp' => 'setGpuRedTemp',
        'asic_red_temp' => 'setAsicRedTemp',
        'asic_red_board_temp' => 'setAsicRedBoardTemp',
        'gpu_red_mem_temp' => 'setGpuRedMemTemp',
        'gpu_red_cpu_temp' => 'setGpuRedCpuTemp',
        'gpu_red_fan' => 'setGpuRedFan',
        'asic_red_fan' => 'setAsicRedFan',
        'gpu_red_asr' => 'setGpuRedAsr',
        'asic_red_asr' => 'setAsicRedAsr',
        'gpu_red_la' => 'setGpuRedLa',
        'asic_red_la' => 'setAsicRedLa',
        'repo_urls' => 'setRepoUrls',
        'power_price' => 'setPowerPrice',
        'power_price_currency' => 'setPowerPriceCurrency',
        'charge_on_pool' => 'setChargeOnPool',
        'autocreate_hash' => 'setAutocreateHash',
        'nonfree' => 'setNonfree',
        'locked' => 'setLocked',
        'twofa_required' => 'setTwofaRequired',
        'trusted' => 'setTrusted',
        'owner' => 'setOwner',
        'payer' => 'setPayer',
        'personal_settings' => 'setPersonalSettings',
        'role' => 'setRole',
        'workers_count' => 'setWorkersCount',
        'rigs_count' => 'setRigsCount',
        'asics_count' => 'setAsicsCount',
        'disabled_rigs_count' => 'setDisabledRigsCount',
        'disabled_asics_count' => 'setDisabledAsicsCount',
        'money' => 'setMoney',
        'stats' => 'setStats',
        'hashrates' => 'setHashrates',
        'hashrates_by_coin' => 'setHashratesByCoin',
        'tag_ids' => 'setTagIds',
        'hardware_power_draw' => 'setHardwarePowerDraw',
        'psu_efficiency' => 'setPsuEfficiency',
        'octofan_correct_power' => 'setOctofanCorrectPower',
        'auto_tags' => 'setAutoTags',
        'default_fs' => 'setDefaultFs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'timezone' => 'getTimezone',
        'gpu_red_temp' => 'getGpuRedTemp',
        'asic_red_temp' => 'getAsicRedTemp',
        'asic_red_board_temp' => 'getAsicRedBoardTemp',
        'gpu_red_mem_temp' => 'getGpuRedMemTemp',
        'gpu_red_cpu_temp' => 'getGpuRedCpuTemp',
        'gpu_red_fan' => 'getGpuRedFan',
        'asic_red_fan' => 'getAsicRedFan',
        'gpu_red_asr' => 'getGpuRedAsr',
        'asic_red_asr' => 'getAsicRedAsr',
        'gpu_red_la' => 'getGpuRedLa',
        'asic_red_la' => 'getAsicRedLa',
        'repo_urls' => 'getRepoUrls',
        'power_price' => 'getPowerPrice',
        'power_price_currency' => 'getPowerPriceCurrency',
        'charge_on_pool' => 'getChargeOnPool',
        'autocreate_hash' => 'getAutocreateHash',
        'nonfree' => 'getNonfree',
        'locked' => 'getLocked',
        'twofa_required' => 'getTwofaRequired',
        'trusted' => 'getTrusted',
        'owner' => 'getOwner',
        'payer' => 'getPayer',
        'personal_settings' => 'getPersonalSettings',
        'role' => 'getRole',
        'workers_count' => 'getWorkersCount',
        'rigs_count' => 'getRigsCount',
        'asics_count' => 'getAsicsCount',
        'disabled_rigs_count' => 'getDisabledRigsCount',
        'disabled_asics_count' => 'getDisabledAsicsCount',
        'money' => 'getMoney',
        'stats' => 'getStats',
        'hashrates' => 'getHashrates',
        'hashrates_by_coin' => 'getHashratesByCoin',
        'tag_ids' => 'getTagIds',
        'hardware_power_draw' => 'getHardwarePowerDraw',
        'psu_efficiency' => 'getPsuEfficiency',
        'octofan_correct_power' => 'getOctofanCorrectPower',
        'auto_tags' => 'getAutoTags',
        'default_fs' => 'getDefaultFs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['gpu_red_temp'] = isset($data['gpu_red_temp']) ? $data['gpu_red_temp'] : null;
        $this->container['asic_red_temp'] = isset($data['asic_red_temp']) ? $data['asic_red_temp'] : null;
        $this->container['asic_red_board_temp'] = isset($data['asic_red_board_temp']) ? $data['asic_red_board_temp'] : null;
        $this->container['gpu_red_mem_temp'] = isset($data['gpu_red_mem_temp']) ? $data['gpu_red_mem_temp'] : null;
        $this->container['gpu_red_cpu_temp'] = isset($data['gpu_red_cpu_temp']) ? $data['gpu_red_cpu_temp'] : null;
        $this->container['gpu_red_fan'] = isset($data['gpu_red_fan']) ? $data['gpu_red_fan'] : null;
        $this->container['asic_red_fan'] = isset($data['asic_red_fan']) ? $data['asic_red_fan'] : null;
        $this->container['gpu_red_asr'] = isset($data['gpu_red_asr']) ? $data['gpu_red_asr'] : null;
        $this->container['asic_red_asr'] = isset($data['asic_red_asr']) ? $data['asic_red_asr'] : null;
        $this->container['gpu_red_la'] = isset($data['gpu_red_la']) ? $data['gpu_red_la'] : null;
        $this->container['asic_red_la'] = isset($data['asic_red_la']) ? $data['asic_red_la'] : null;
        $this->container['repo_urls'] = isset($data['repo_urls']) ? $data['repo_urls'] : null;
        $this->container['power_price'] = isset($data['power_price']) ? $data['power_price'] : null;
        $this->container['power_price_currency'] = isset($data['power_price_currency']) ? $data['power_price_currency'] : null;
        $this->container['charge_on_pool'] = isset($data['charge_on_pool']) ? $data['charge_on_pool'] : null;
        $this->container['autocreate_hash'] = isset($data['autocreate_hash']) ? $data['autocreate_hash'] : null;
        $this->container['nonfree'] = isset($data['nonfree']) ? $data['nonfree'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['twofa_required'] = isset($data['twofa_required']) ? $data['twofa_required'] : null;
        $this->container['trusted'] = isset($data['trusted']) ? $data['trusted'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['personal_settings'] = isset($data['personal_settings']) ? $data['personal_settings'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['workers_count'] = isset($data['workers_count']) ? $data['workers_count'] : null;
        $this->container['rigs_count'] = isset($data['rigs_count']) ? $data['rigs_count'] : null;
        $this->container['asics_count'] = isset($data['asics_count']) ? $data['asics_count'] : null;
        $this->container['disabled_rigs_count'] = isset($data['disabled_rigs_count']) ? $data['disabled_rigs_count'] : null;
        $this->container['disabled_asics_count'] = isset($data['disabled_asics_count']) ? $data['disabled_asics_count'] : null;
        $this->container['money'] = isset($data['money']) ? $data['money'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['hashrates'] = isset($data['hashrates']) ? $data['hashrates'] : null;
        $this->container['hashrates_by_coin'] = isset($data['hashrates_by_coin']) ? $data['hashrates_by_coin'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['hardware_power_draw'] = isset($data['hardware_power_draw']) ? $data['hardware_power_draw'] : null;
        $this->container['psu_efficiency'] = isset($data['psu_efficiency']) ? $data['psu_efficiency'] : null;
        $this->container['octofan_correct_power'] = isset($data['octofan_correct_power']) ? $data['octofan_correct_power'] : null;
        $this->container['auto_tags'] = isset($data['auto_tags']) ? $data['auto_tags'] : null;
        $this->container['default_fs'] = isset($data['default_fs']) ? $data['default_fs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Farm., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Time zone for all farm workers. Default is account's time zone.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets gpu_red_temp
     *
     * @return int
     */
    public function getGpuRedTemp()
    {
        return $this->container['gpu_red_temp'];
    }

    /**
     * Sets gpu_red_temp
     *
     * @param int $gpu_red_temp Red Temperature for GPU workers, °C
     *
     * @return $this
     */
    public function setGpuRedTemp($gpu_red_temp)
    {
        $this->container['gpu_red_temp'] = $gpu_red_temp;

        return $this;
    }

    /**
     * Gets asic_red_temp
     *
     * @return int
     */
    public function getAsicRedTemp()
    {
        return $this->container['asic_red_temp'];
    }

    /**
     * Sets asic_red_temp
     *
     * @param int $asic_red_temp Red Temperature for ASIC workers, °C
     *
     * @return $this
     */
    public function setAsicRedTemp($asic_red_temp)
    {
        $this->container['asic_red_temp'] = $asic_red_temp;

        return $this;
    }

    /**
     * Gets asic_red_board_temp
     *
     * @return float
     */
    public function getAsicRedBoardTemp()
    {
        return $this->container['asic_red_board_temp'];
    }

    /**
     * Sets asic_red_board_temp
     *
     * @param float $asic_red_board_temp Red Board Temperature for ASIC workers, °C
     *
     * @return $this
     */
    public function setAsicRedBoardTemp($asic_red_board_temp)
    {
        $this->container['asic_red_board_temp'] = $asic_red_board_temp;

        return $this;
    }

    /**
     * Gets gpu_red_mem_temp
     *
     * @return float
     */
    public function getGpuRedMemTemp()
    {
        return $this->container['gpu_red_mem_temp'];
    }

    /**
     * Sets gpu_red_mem_temp
     *
     * @param float $gpu_red_mem_temp Red memory temperature for GPU workers, °C
     *
     * @return $this
     */
    public function setGpuRedMemTemp($gpu_red_mem_temp)
    {
        $this->container['gpu_red_mem_temp'] = $gpu_red_mem_temp;

        return $this;
    }

    /**
     * Gets gpu_red_cpu_temp
     *
     * @return float
     */
    public function getGpuRedCpuTemp()
    {
        return $this->container['gpu_red_cpu_temp'];
    }

    /**
     * Sets gpu_red_cpu_temp
     *
     * @param float $gpu_red_cpu_temp Red CPU temperature for GPU workers, °C
     *
     * @return $this
     */
    public function setGpuRedCpuTemp($gpu_red_cpu_temp)
    {
        $this->container['gpu_red_cpu_temp'] = $gpu_red_cpu_temp;

        return $this;
    }

    /**
     * Gets gpu_red_fan
     *
     * @return int
     */
    public function getGpuRedFan()
    {
        return $this->container['gpu_red_fan'];
    }

    /**
     * Sets gpu_red_fan
     *
     * @param int $gpu_red_fan Red Fan speed for GPU workers, %
     *
     * @return $this
     */
    public function setGpuRedFan($gpu_red_fan)
    {
        $this->container['gpu_red_fan'] = $gpu_red_fan;

        return $this;
    }

    /**
     * Gets asic_red_fan
     *
     * @return int
     */
    public function getAsicRedFan()
    {
        return $this->container['asic_red_fan'];
    }

    /**
     * Sets asic_red_fan
     *
     * @param int $asic_red_fan Red Fan speed for ASIC workers, %
     *
     * @return $this
     */
    public function setAsicRedFan($asic_red_fan)
    {
        $this->container['asic_red_fan'] = $asic_red_fan;

        return $this;
    }

    /**
     * Gets gpu_red_asr
     *
     * @return int
     */
    public function getGpuRedAsr()
    {
        return $this->container['gpu_red_asr'];
    }

    /**
     * Sets gpu_red_asr
     *
     * @param int $gpu_red_asr Red Accepted Shares Ratio for GPU workers, %
     *
     * @return $this
     */
    public function setGpuRedAsr($gpu_red_asr)
    {
        $this->container['gpu_red_asr'] = $gpu_red_asr;

        return $this;
    }

    /**
     * Gets asic_red_asr
     *
     * @return int
     */
    public function getAsicRedAsr()
    {
        return $this->container['asic_red_asr'];
    }

    /**
     * Sets asic_red_asr
     *
     * @param int $asic_red_asr Red Accepted Shares Ratio for ASIC workers, %
     *
     * @return $this
     */
    public function setAsicRedAsr($asic_red_asr)
    {
        $this->container['asic_red_asr'] = $asic_red_asr;

        return $this;
    }

    /**
     * Gets gpu_red_la
     *
     * @return float
     */
    public function getGpuRedLa()
    {
        return $this->container['gpu_red_la'];
    }

    /**
     * Sets gpu_red_la
     *
     * @param float $gpu_red_la Red Load Average per one CPU core for GPU workers
     *
     * @return $this
     */
    public function setGpuRedLa($gpu_red_la)
    {
        $this->container['gpu_red_la'] = $gpu_red_la;

        return $this;
    }

    /**
     * Gets asic_red_la
     *
     * @return float
     */
    public function getAsicRedLa()
    {
        return $this->container['asic_red_la'];
    }

    /**
     * Sets asic_red_la
     *
     * @param float $asic_red_la Red Load Average per one CPU core for ASIC workers
     *
     * @return $this
     */
    public function setAsicRedLa($asic_red_la)
    {
        $this->container['asic_red_la'] = $asic_red_la;

        return $this;
    }

    /**
     * Gets repo_urls
     *
     * @return string[]
     */
    public function getRepoUrls()
    {
        return $this->container['repo_urls'];
    }

    /**
     * Sets repo_urls
     *
     * @param string[] $repo_urls Package repository URL list. Use this to override default list.
     *
     * @return $this
     */
    public function setRepoUrls($repo_urls)
    {
        $this->container['repo_urls'] = $repo_urls;

        return $this;
    }

    /**
     * Gets power_price
     *
     * @return float
     */
    public function getPowerPrice()
    {
        return $this->container['power_price'];
    }

    /**
     * Sets power_price
     *
     * @param float $power_price Electricity price per kilowatt hour
     *
     * @return $this
     */
    public function setPowerPrice($power_price)
    {
        $this->container['power_price'] = $power_price;

        return $this;
    }

    /**
     * Gets power_price_currency
     *
     * @return string
     */
    public function getPowerPriceCurrency()
    {
        return $this->container['power_price_currency'];
    }

    /**
     * Sets power_price_currency
     *
     * @param string $power_price_currency Currency of electricity price
     *
     * @return $this
     */
    public function setPowerPriceCurrency($power_price_currency)
    {
        $this->container['power_price_currency'] = $power_price_currency;

        return $this;
    }

    /**
     * Gets charge_on_pool
     *
     * @return bool
     */
    public function getChargeOnPool()
    {
        return $this->container['charge_on_pool'];
    }

    /**
     * Sets charge_on_pool
     *
     * @param bool $charge_on_pool Enable charging on brand pool
     *
     * @return $this
     */
    public function setChargeOnPool($charge_on_pool)
    {
        $this->container['charge_on_pool'] = $charge_on_pool;

        return $this;
    }

    /**
     * Gets autocreate_hash
     *
     * @return string
     */
    public function getAutocreateHash()
    {
        return $this->container['autocreate_hash'];
    }

    /**
     * Sets autocreate_hash
     *
     * @param string $autocreate_hash Unique ID to be used for connecting new workers to the farm
     *
     * @return $this
     */
    public function setAutocreateHash($autocreate_hash)
    {
        $this->container['autocreate_hash'] = $autocreate_hash;

        return $this;
    }

    /**
     * Gets nonfree
     *
     * @return bool
     */
    public function getNonfree()
    {
        return $this->container['nonfree'];
    }

    /**
     * Sets nonfree
     *
     * @param bool $nonfree Paid features state
     *
     * @return $this
     */
    public function setNonfree($nonfree)
    {
        $this->container['nonfree'] = $nonfree;

        return $this;
    }

    /**
     * Gets locked
     *
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     *
     * @param bool $locked Farm is locked due to exceeding overdraft limit
     *
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets twofa_required
     *
     * @return bool
     */
    public function getTwofaRequired()
    {
        return $this->container['twofa_required'];
    }

    /**
     * Sets twofa_required
     *
     * @param bool $twofa_required 2FA is required for update operations (if not owner)
     *
     * @return $this
     */
    public function setTwofaRequired($twofa_required)
    {
        $this->container['twofa_required'] = $twofa_required;

        return $this;
    }

    /**
     * Gets trusted
     *
     * @return bool
     */
    public function getTrusted()
    {
        return $this->container['trusted'];
    }

    /**
     * Sets trusted
     *
     * @param bool $trusted Farm is trusted (if not owner)
     *
     * @return $this
     */
    public function setTrusted($trusted)
    {
        $this->container['trusted'] = $trusted;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return object
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param object $owner Who owns the farm
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return object
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param object $payer Who pays for the farm. If not set - owner is the payer.
     *
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets personal_settings
     *
     * @return object
     */
    public function getPersonalSettings()
    {
        return $this->container['personal_settings'];
    }

    /**
     * Sets personal_settings
     *
     * @param object $personal_settings Personal settings for current user
     *
     * @return $this
     */
    public function setPersonalSettings($personal_settings)
    {
        $this->container['personal_settings'] = $personal_settings;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \Swagger\Client\Model\AccessRoleEnum
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \Swagger\Client\Model\AccessRoleEnum $role role
     *
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets workers_count
     *
     * @return int
     */
    public function getWorkersCount()
    {
        return $this->container['workers_count'];
    }

    /**
     * Sets workers_count
     *
     * @param int $workers_count Total amount of workers in farm
     *
     * @return $this
     */
    public function setWorkersCount($workers_count)
    {
        $this->container['workers_count'] = $workers_count;

        return $this;
    }

    /**
     * Gets rigs_count
     *
     * @return int
     */
    public function getRigsCount()
    {
        return $this->container['rigs_count'];
    }

    /**
     * Sets rigs_count
     *
     * @param int $rigs_count Total amount of Rigs in farm
     *
     * @return $this
     */
    public function setRigsCount($rigs_count)
    {
        $this->container['rigs_count'] = $rigs_count;

        return $this;
    }

    /**
     * Gets asics_count
     *
     * @return int
     */
    public function getAsicsCount()
    {
        return $this->container['asics_count'];
    }

    /**
     * Sets asics_count
     *
     * @param int $asics_count Total amount of ASICs in farm
     *
     * @return $this
     */
    public function setAsicsCount($asics_count)
    {
        $this->container['asics_count'] = $asics_count;

        return $this;
    }

    /**
     * Gets disabled_rigs_count
     *
     * @return int
     */
    public function getDisabledRigsCount()
    {
        return $this->container['disabled_rigs_count'];
    }

    /**
     * Sets disabled_rigs_count
     *
     * @param int $disabled_rigs_count Amount of disabled Rigs in farm
     *
     * @return $this
     */
    public function setDisabledRigsCount($disabled_rigs_count)
    {
        $this->container['disabled_rigs_count'] = $disabled_rigs_count;

        return $this;
    }

    /**
     * Gets disabled_asics_count
     *
     * @return int
     */
    public function getDisabledAsicsCount()
    {
        return $this->container['disabled_asics_count'];
    }

    /**
     * Sets disabled_asics_count
     *
     * @param int $disabled_asics_count Amount of disabled ASICs in farm
     *
     * @return $this
     */
    public function setDisabledAsicsCount($disabled_asics_count)
    {
        $this->container['disabled_asics_count'] = $disabled_asics_count;

        return $this;
    }

    /**
     * Gets money
     *
     * @return object
     */
    public function getMoney()
    {
        return $this->container['money'];
    }

    /**
     * Sets money
     *
     * @param object $money money
     *
     * @return $this
     */
    public function setMoney($money)
    {
        $this->container['money'] = $money;

        return $this;
    }

    /**
     * Gets stats
     *
     * @return \Swagger\Client\Model\FarmStats
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     *
     * @param \Swagger\Client\Model\FarmStats $stats stats
     *
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets hashrates
     *
     * @return object[]
     */
    public function getHashrates()
    {
        return $this->container['hashrates'];
    }

    /**
     * Sets hashrates
     *
     * @param object[] $hashrates hashrates
     *
     * @return $this
     */
    public function setHashrates($hashrates)
    {
        $this->container['hashrates'] = $hashrates;

        return $this;
    }

    /**
     * Gets hashrates_by_coin
     *
     * @return object[]
     */
    public function getHashratesByCoin()
    {
        return $this->container['hashrates_by_coin'];
    }

    /**
     * Sets hashrates_by_coin
     *
     * @param object[] $hashrates_by_coin Summary hashrates per coin
     *
     * @return $this
     */
    public function setHashratesByCoin($hashrates_by_coin)
    {
        $this->container['hashrates_by_coin'] = $hashrates_by_coin;

        return $this;
    }

    /**
     * Gets tag_ids
     *
     * @return int[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     *
     * @param int[] $tag_ids tag_ids
     *
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets hardware_power_draw
     *
     * @return int
     */
    public function getHardwarePowerDraw()
    {
        return $this->container['hardware_power_draw'];
    }

    /**
     * Sets hardware_power_draw
     *
     * @param int $hardware_power_draw Power consumption of worker's hardware, watts
     *
     * @return $this
     */
    public function setHardwarePowerDraw($hardware_power_draw)
    {
        $this->container['hardware_power_draw'] = $hardware_power_draw;

        return $this;
    }

    /**
     * Gets psu_efficiency
     *
     * @return int
     */
    public function getPsuEfficiency()
    {
        return $this->container['psu_efficiency'];
    }

    /**
     * Sets psu_efficiency
     *
     * @param int $psu_efficiency Efficiency of power supply unit, %
     *
     * @return $this
     */
    public function setPsuEfficiency($psu_efficiency)
    {
        $this->container['psu_efficiency'] = $psu_efficiency;

        return $this;
    }

    /**
     * Gets octofan_correct_power
     *
     * @return bool
     */
    public function getOctofanCorrectPower()
    {
        return $this->container['octofan_correct_power'];
    }

    /**
     * Sets octofan_correct_power
     *
     * @param bool $octofan_correct_power Apply power correction settings to power consumption value from Octominer fan controller. Default is false.
     *
     * @return $this
     */
    public function setOctofanCorrectPower($octofan_correct_power)
    {
        $this->container['octofan_correct_power'] = $octofan_correct_power;

        return $this;
    }

    /**
     * Gets auto_tags
     *
     * @return bool
     */
    public function getAutoTags()
    {
        return $this->container['auto_tags'];
    }

    /**
     * Sets auto_tags
     *
     * @param bool $auto_tags Auto-tags feature. If enabled - all workers inside the farm are automatically tagged. Rigs are tagged by GPU information such as model name, memory size, OEM, etc. ASICs are tagged by model name.
     *
     * @return $this
     */
    public function setAutoTags($auto_tags)
    {
        $this->container['auto_tags'] = $auto_tags;

        return $this;
    }

    /**
     * Gets default_fs
     *
     * @return map[string,int]
     */
    public function getDefaultFs()
    {
        return $this->container['default_fs'];
    }

    /**
     * Sets default_fs
     *
     * @param map[string,int] $default_fs Default flight sheets keyed by platform (1 - rig, 2 - asic). These flight sheets will be automatically attached to newly created workers.
     *
     * @return $this
     */
    public function setDefaultFs($default_fs)
    {
        $this->container['default_fs'] = $default_fs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


