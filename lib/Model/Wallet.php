<?php
/**
 * Wallet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hive OS API
 *
 * App API for Hive OS 2.0
 *
 * OpenAPI spec version: 2.1-beta
 * Contact: brain@hiveos.farm
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.25
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Wallet Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Wallet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Wallet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'coin' => 'string',
        'name' => 'string',
        'wal' => 'string',
        'source' => 'string',
        'fetch_balance' => 'bool',
        'api_key_id' => 'int',
        'balance' => 'object',
        'pool_balances' => 'object[]',
        'fs_count' => 'int',
        'workers_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'coin' => null,
        'name' => null,
        'wal' => null,
        'source' => null,
        'fetch_balance' => null,
        'api_key_id' => null,
        'balance' => null,
        'pool_balances' => null,
        'fs_count' => null,
        'workers_count' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'coin' => 'coin',
        'name' => 'name',
        'wal' => 'wal',
        'source' => 'source',
        'fetch_balance' => 'fetch_balance',
        'api_key_id' => 'api_key_id',
        'balance' => 'balance',
        'pool_balances' => 'pool_balances',
        'fs_count' => 'fs_count',
        'workers_count' => 'workers_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'coin' => 'setCoin',
        'name' => 'setName',
        'wal' => 'setWal',
        'source' => 'setSource',
        'fetch_balance' => 'setFetchBalance',
        'api_key_id' => 'setApiKeyId',
        'balance' => 'setBalance',
        'pool_balances' => 'setPoolBalances',
        'fs_count' => 'setFsCount',
        'workers_count' => 'setWorkersCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'coin' => 'getCoin',
        'name' => 'getName',
        'wal' => 'getWal',
        'source' => 'getSource',
        'fetch_balance' => 'getFetchBalance',
        'api_key_id' => 'getApiKeyId',
        'balance' => 'getBalance',
        'pool_balances' => 'getPoolBalances',
        'fs_count' => 'getFsCount',
        'workers_count' => 'getWorkersCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['coin'] = isset($data['coin']) ? $data['coin'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['wal'] = isset($data['wal']) ? $data['wal'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['fetch_balance'] = isset($data['fetch_balance']) ? $data['fetch_balance'] : false;
        $this->container['api_key_id'] = isset($data['api_key_id']) ? $data['api_key_id'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['pool_balances'] = isset($data['pool_balances']) ? $data['pool_balances'] : null;
        $this->container['fs_count'] = isset($data['fs_count']) ? $data['fs_count'] : null;
        $this->container['workers_count'] = isset($data['workers_count']) ? $data['workers_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['wal']) && (mb_strlen($this->container['wal']) > 255)) {
            $invalidProperties[] = "invalid value for 'wal', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['source']) && (mb_strlen($this->container['source']) > 100)) {
            $invalidProperties[] = "invalid value for 'source', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets coin
     *
     * @return string
     */
    public function getCoin()
    {
        return $this->container['coin'];
    }

    /**
     * Sets coin
     *
     * @param string $coin Coin name
     *
     * @return $this
     */
    public function setCoin($coin)
    {
        $this->container['coin'] = $coin;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Display name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Wallet., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets wal
     *
     * @return string
     */
    public function getWal()
    {
        return $this->container['wal'];
    }

    /**
     * Sets wal
     *
     * @param string $wal 
     *
     * @return $this
     */
    public function setWal($wal)
    {
        if (!is_null($wal) && (mb_strlen($wal) > 255)) {
            throw new \InvalidArgumentException('invalid length for $wal when calling Wallet., must be smaller than or equal to 255.');
        }

        $this->container['wal'] = $wal;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source Wallet source. Can be either exchange name or any string. For supported exchanges see /hive/wallet_sources endpoint.
     *
     * @return $this
     */
    public function setSource($source)
    {
        if (!is_null($source) && (mb_strlen($source) > 100)) {
            throw new \InvalidArgumentException('invalid length for $source when calling Wallet., must be smaller than or equal to 100.');
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets fetch_balance
     *
     * @return bool
     */
    public function getFetchBalance()
    {
        return $this->container['fetch_balance'];
    }

    /**
     * Sets fetch_balance
     *
     * @param bool $fetch_balance Try to retrieve wallet balance from blockchain or exchange
     *
     * @return $this
     */
    public function setFetchBalance($fetch_balance)
    {
        $this->container['fetch_balance'] = $fetch_balance;

        return $this;
    }

    /**
     * Gets api_key_id
     *
     * @return int
     */
    public function getApiKeyId()
    {
        return $this->container['api_key_id'];
    }

    /**
     * Sets api_key_id
     *
     * @param int $api_key_id ID of attached API key for balance fetching (if required)
     *
     * @return $this
     */
    public function setApiKeyId($api_key_id)
    {
        $this->container['api_key_id'] = $api_key_id;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return object
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param object $balance Wallet balance info. Either balance or status is present, not both. Pending status indicates that the balance is fetching at the moment and will be available soon. Other statuses indicate balance cannot be fetched. Balance info is cached by 30 minutes.
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets pool_balances
     *
     * @return object[]
     */
    public function getPoolBalances()
    {
        return $this->container['pool_balances'];
    }

    /**
     * Sets pool_balances
     *
     * @param object[] $pool_balances Balances from pools that this wallet uses
     *
     * @return $this
     */
    public function setPoolBalances($pool_balances)
    {
        $this->container['pool_balances'] = $pool_balances;

        return $this;
    }

    /**
     * Gets fs_count
     *
     * @return int
     */
    public function getFsCount()
    {
        return $this->container['fs_count'];
    }

    /**
     * Sets fs_count
     *
     * @param int $fs_count Amount of flight sheets that use this wallet
     *
     * @return $this
     */
    public function setFsCount($fs_count)
    {
        $this->container['fs_count'] = $fs_count;

        return $this;
    }

    /**
     * Gets workers_count
     *
     * @return int
     */
    public function getWorkersCount()
    {
        return $this->container['workers_count'];
    }

    /**
     * Sets workers_count
     *
     * @param int $workers_count Amount of workers that use this wallet
     *
     * @return $this
     */
    public function setWorkersCount($workers_count)
    {
        $this->container['workers_count'] = $workers_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


